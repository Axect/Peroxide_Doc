searchState.loadedDescShard("peroxide", 0, "<code>peroxide</code> is comprehensive numerical library for Rust.\nHigh level macro for bisection\nR like concatenate (Type: Vec&lt;f64&gt;)\nR like cbind\nR like <code>dnorm</code>\nR like <code>dt</code>\nMATLAB like eye - identity matrix\nHigh level macro for false position\nChoose what you want.\nMATLAB like linspace\nR like lm\nUseful macros\nMore R like Matrix constructor (Macro)\nMachine learning tools\nHigh level macro for newton (using Automatic …\nDifferential equations &amp; Numerical Analysis tools\nR like <code>pnorm</code>\nDo not disturbed. Just use.\nR like <code>pt</code>\nMATLAB like rand - random matrix\nR like rbind\nR like random normal\nR like random Student’s t\nR like random uniform\nHigh level macro for secant\nR like seq macro\nMacro for single derivative\nMacro for single function\nSpecial functions module\nStatistical Modules\nMain structures for peroxide\nUtility - plot, print, pickle and etc.\nMATLAB like zeros - zero matrix\nImaginary portion of the complex number\nReal portion of the complex number\nR-like complex matrix structure\nMutable slice of <code>self.data</code>\nSlice of <code>self.data</code>\nBackward Substitution for Upper Triangular\nBlock Partition\nMATLAB like eye - Identity matrix\nGEMM wrapper for Matrixmultiply\nGeneral Matrix-Vector multiplication\nChange Bindings\nChange Bindings Mutably\nMatrix multiply back-ends\nR-like complex matrix constructor\nExtract Column\nColumn map\nR like cbind - concatenate two comlex matrix by column …\nCombine separated Complex Matrix to one Complex Matrix\nGeneral Vector-Matrix multiplication\nInverse of Lower matrix\nInverse of upper triangular matrix\nR like rbind - concatenate two complex matrix by row …\nDeterminant\nExtract diagonal components\nForward substitution for Lower Triangular\nReturns the argument unchanged.\nFrom index operations\nCalls <code>U::from(self)</code>.\nInverse of Matrix\nLU Decomposition Implements (Complete Pivot)\nMatlab-like matrix constructor\nRaw mutable pointer for <code>self.data</code>\nRaw pointer for <code>self.data</code>\nPython-like complex matrix constructor\nR-like complex matrix constructor (Explicit ver.)\nExtract Row\nRow map\nSolve with Vector\nSpread data(1D vector) to 2D formatted String\nSubmatrix\nSubstitute Col\nSubstitute complex matrix to specific position\nSubstitute Row\nMatrix to <code>Vec&lt;Vec&lt;C64&gt;&gt;</code>\nTranspose\nDefines the compression settings for writing a parquet …\nA marker trait over <code>RngCore</code> for securely unpredictable RNGs\nTypes (distributions) that can be used to create a random …\nExtension trait on indexable lists, providing random …\nExtension trait on indexable lists, providing random …\nExtension trait on iterators, providing random sampling …\nUser-level interface for RNGs\nImplementation-level interface for RNGs\nSeed type, which is restricted to types …\nA random number generator that can be explicitly seeded.\nExtension trait on slices, providing shuffling methods.\nA small-state, fast, non-crypto, non-portable PRNG\nA strong, fast (amortized), non-portable RNG\nA reference to the thread-local generator\nUniformly sample one element\nUniformly sample one element\nUniformly sample one element\nUniformly sample one element\nUniformly sample <code>amount</code> distinct elements into a <code>Vec</code>\nUniformly sample <code>amount</code> distinct elements into a <code>Vec</code>\nUniformly sample <code>amount</code> distinct elements from self\nUniformly sample <code>amount</code> distinct elements from self\nUniformly sample a fixed-size array of distinct elements …\nUniformly sample a fixed-size array of distinct elements …\nUniformly sample <code>amount</code> distinct elements into a buffer\nUniformly sample <code>amount</code> distinct elements into a buffer\nBiased sampling of <code>amount</code> distinct elements\nBiased sampling of <code>amount</code> distinct elements\nUniformly sample one element (mut)\nUniformly sample one element (mut)\nUniformly sample one element (stable)\nUniformly sample one element (stable)\nBiased sampling for one element\nBiased sampling for one element\nBiased sampling for one element (mut)\nBiased sampling for one element (mut)\nFill any type implementing <code>Fill</code> with random data\nFill any type implementing <code>Fill</code> with random data\nFill <code>dest</code> with random data.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new instance of the RNG seeded via <code>getrandom</code>.\nCreates a new instance of the RNG seeded via <code>getrandom</code>.\nCreate a new PRNG seeded from an infallible <code>Rng</code>.\nCreate a new PRNG seeded from an infallible <code>Rng</code>.\nCreate a new PRNG using the given seed.\nAlias for <code>Rng::random</code>.\nAlias for <code>Rng::random</code>.\nAlias for <code>Rng::random_bool</code>.\nAlias for <code>Rng::random_bool</code>.\nAlias for <code>Rng::random_range</code>.\nAlias for <code>Rng::random_range</code>.\nAlias for <code>Rng::random_ratio</code>.\nAlias for <code>Rng::random_ratio</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTrue when the length is zero\nTrue when the length is zero\nThe length\nMap sampled values to type <code>S</code>\nMap sampled values to type <code>S</code>\nReturn the next random <code>u32</code>.\nReturn the next random <code>u64</code>.\nShuffle a slice in place, but exit early.\nReturn a random value via the <code>StandardUniform</code> distribution.\nReturn a random value via the <code>StandardUniform</code> distribution.\nReturn a bool with a probability <code>p</code> of being true.\nReturn a bool with a probability <code>p</code> of being true.\nReturn an iterator over <code>random</code> variates\nReturn an iterator over <code>random</code> variates\nGenerate a random value in the given range.\nGenerate a random value in the given range.\nReturn a bool with a probability of <code>numerator/denominator</code> …\nReturn a bool with a probability of <code>numerator/denominator</code> …\nImmediately reseed the generator\nGenerate a random value of <code>T</code>, using <code>rng</code> as the source of …\nSample a new value, using the given distribution.\nSample a new value, using the given distribution.\nCreate an iterator that generates random values of <code>T</code>, …\nCreate an iterator that generates random values of <code>T</code>, …\nCreate an iterator that generates values using the given …\nCreate an iterator that generates values using the given …\nCreate a new PRNG using a <code>u64</code> seed.\nCreate a new PRNG using a <code>u64</code> seed.\nShuffle a mutable slice in place.\nCreates a new instance of the RNG seeded via <code>getrandom</code> …\nCreates a new instance of the RNG seeded via <code>getrandom</code> …\nCreate a new PRNG seeded from a potentially fallible <code>Rng</code>.\nCreate a new PRNG seeded from a potentially fallible <code>Rng</code>.\nR like macros\nSimple Least Square 2D\nTo find Eigenvalue &amp; Eigenvector\nOrdinary Differential Equation (ODE) Solvers\nTo optimize parametric model (non-linear regression)\nRoot Finding Methods\nSpline interpolations\nTo do Jacobi method\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMain Jacobi traits\nType that can be integrated using Gauss Kronrod Quadrature\nType that can be integrated using Gauss Legendre or …\nType that can be integrated using Newton Cotes Quadrature\nThe neutral element of addition.\nReturns the image of <code>node_x</code> under function <code>f</code>, in a …\nComputes one <code>Lagrange polynomial</code> for each one of the …\nSeparately evaluates each of the polynomial integrated …\nReturns the argument unchanged.\nGauss Kronrod Quadrature\nGauss Legendre Quadrature\nReturns the value of the norm used by Gauss Kronrod …\nNumerical Integration\nSeparately integrates each of the polynomials obtained …\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if this object is neither infinite nor NaN.\nReturns true if this object is less than the tolerance …\nNewton Cotes Quadrature\nNewton-Raphson Method\nAn archived <code>BS23</code>\nAn archived <code>DP45</code>\nAn archived <code>GL4</code>\nAn archived <code>ImplicitSolver</code>\nAn archived <code>RALS3</code>\nAn archived <code>RALS4</code>\nAn archived <code>RK4</code>\nAn archived <code>RK5</code>\nAn archived <code>RKF45</code>\nAn archived <code>RKF78</code>\nAn archived <code>TSIT45</code>\nBogacki-Shampine 3(2) method\nThe resolver for an archived <code>BS23</code>\nA basic ODE solver using a specified integrator.\nThe resolver for <code>ImplicitSolver::Broyden</code>\nThe archived counterpart of <code>ImplicitSolver::Broyden</code>\nTrait for Butcher tableau\nDormand-Prince 5(4) method\nThe resolver for an archived <code>DP45</code>\nThe resolver for <code>ImplicitSolver::FixedPoint</code>\nThe archived counterpart of <code>ImplicitSolver::FixedPoint</code>\nGauss-Legendre 4th order integrator.\nThe resolver for an archived <code>GL4</code>\nEnum for implicit solvers.\nThe resolver for an archived <code>ImplicitSolver</code>\nEnum for ODE errors.\nTrait for ODE integrators.\nTrait for defining an ODE problem.\nTrait for ODE solvers.\nRalston’s 3rd order integrator\nThe resolver for an archived <code>RALS3</code>\nRalston’s 4th order integrator.\nThe resolver for an archived <code>RALS4</code>\nRunge-Kutta 4th order integrator.\nThe resolver for an archived <code>RK4</code>\nRunge-Kutta 5th order integrator\nThe resolver for an archived <code>RK5</code>\nRunge-Kutta-Fehlberg 4/5th order integrator.\nThe resolver for an archived <code>RKF45</code>\nRunge-Kutta-Fehlberg 7/8th order integrator.\nThe resolver for an archived <code>RKF78</code>\nTsitouras 5(4) method\nThe resolver for an archived <code>TSIT45</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nOptimizer for optimization (non-linear regression)\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet domain\nGet error\nGet hyperparameter (learning rate or lambda or etc.)\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMain function for optimization\nSet initial parameter\nSet initial lambda for <code>LevenbergMarquardt</code>\nSet maximum lambda for <code>LevenbergMarquardt</code>\nSet learning rate for <code>GradientDescent</code>\nSet maximum iteration\nSet optimization method\nBisection method\nBroyden method\nFalse position method\nHessian alias (<code>[[[f64; C]; C]; R]</code>)\nInterval alias (<code>([f64; N], [f64; N])</code>)\nJacobian alias (<code>[[f64; C]; R]</code>)\nNewton method\nPoint alias (<code>[f64; N]</code>)\nTrait to define a root finder\nTrait to define a root finding problem\nSecant method\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAn archived <code>BSpline</code>\nAn archived <code>CubicBSplineBases</code>\nAn archived <code>CubicHermiteSpline</code>\nAn archived <code>CubicSpline</code>\nAn archived <code>UnitCubicBasis</code>\nB-Spline\nThe resolver for an archived <code>BSpline</code>\nUniform Cubic B-Spline basis functions\nThe resolver for an archived <code>CubicBSplineBases</code>\nThe resolver for an archived <code>CubicHermiteSpline</code>\nCubic Spline (Natural)\nThe resolver for an archived <code>CubicSpline</code>\nUnit Cubic Basis Function\nThe resolver for an archived <code>UnitCubicBasis</code>\nCreate new clamped B-Spline\nObtain basis function via Cox-de Boor algorithm\nCubic Spline (Natural)\nExtends the spline with the given nodes.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate new Cubic B-Spline basis functions for <code>[a, b]</code>\nExamples\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate new Cubic B-Spline basis functions\nCreate new open B-Spline\nRescale all basis functions\nJacobian Matrix\nTriDiagonal Matrix Algorithm (TDMA)\nA marker trait over <code>RngCore</code> for securely unpredictable RNGs\nTypes (distributions) that can be used to create a random …\nExtension trait on indexable lists, providing random …\nExtension trait on indexable lists, providing random …\nExtension trait on iterators, providing random sampling …\nUser-level interface for RNGs\nImplementation-level interface for RNGs\nSeed type, which is restricted to types …\nA random number generator that can be explicitly seeded.\nExtension trait on slices, providing shuffling methods.\nA small-state, fast, non-crypto, non-portable PRNG\nA strong, fast (amortized), non-portable RNG\nA reference to the thread-local generator\nFill <code>dest</code> with random data.\nCreate a new PRNG using the given seed.\nThe length\nReturn the next random <code>u32</code>.\nReturn the next random <code>u64</code>.\nShuffle a slice in place, but exit early.\nGenerate a random value of <code>T</code>, using <code>rng</code> as the source of …\nShuffle a mutable slice in place.\nSimple Norm\nSimple handle parquet\nSimple Linear algebra\nSimple Chebyshev Polynomial (First Kind)\nSimple Eigenpair\nSimple integrate\nThe principal branch of the Lambert W function, W_0(<code>z</code>).\nThe secondary branch of the Lambert W function, W_-1(<code>z</code>).\nSimple solve\nLanczos approximation Coefficient generator\nDecides the accuracy mode of the Lambert W functions.\nSlower, 50 bits of accuracy.\nFaster, 24 bits of accuracy.\nBeta function\nError function\nComplement error function\nReturns the argument unchanged.\nGamma function\nGaussian function\nRegularized incomplete Beta function\nRegularized incomplete gamma integral (Lower)\nCalls <code>U::from(self)</code>.\nInverse error function\nInverse complementary error function\nInverse regularized incomplete beta function\nInverse of regularized incomplete gamma integral (Lower)\nThe principal branch of the Lambert W function, W_0(<code>z</code>).\nThe secondary branch of the Lambert W function, W_-1(<code>z</code>).\nLogarithm Gamma function\nPhi (CDF for Normal Dist)\nPochhammer symbol\nLanczos Approximation Coefficient\nProbabilistic distributions\nRandom number generator\nBasic statistics\nOne parameter distribution\nExtract parameter\nRandom Number Generator trait\nTwo parameter distribution\nCumulative Distribution Function\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate WeightedUniform from max pooling\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new weighted uniform distribution\nProbability Distribution Function\nExtract samples of distributions\nExtract samples of distributions with rng\nCombination\nCombination with Repetition\nPermutation\nDouble Factorial\nFactorial\nGaussian random number generator using Marsaglia polar form\nPiecewise Rejection Sampling\nPiecewise Rejection Sampling with specific Rng\nSimple uniform random number generator with ThreadRng\nSmall random number generator from seed\nStd random number generator from seed\nGaussian random numbers using the Ziggurat Method\nAccuracy\nBalanced Accuracy\nBookmaker Informedness (Informedness)\nConfusion Matrix\nDiagnostic Odds Ratio\nF1 Score\nFalse Discovery Rate\nFowlkes-Mallows Index\nFalse Negative Rate (Miss-rate)\nFalse Omission Rate\nFalse Positive Rate (Fall-out)\nNegative Likelihood Ratio\nPositive Likelihood Ratio\nMatthews Correlation Coefficient (Phi Coefficient)\nMarkedness (deltaP)\nCondition Negative\nNegative Predictive Value\nTrait for Ordered Statistics\nCondition Positive\nPositive Predictive Value (Precision)\nPrevalence Threshold\nR Quantile Type enums\nStatistics Trait\nTrue Negative Rate (Specificity, Selectivity)\nTrue Positive Rate (Sensitivity, Recall, Hit-rate)\nThreat Score (Critical Success Index)\nCalculate a specific metric\nCalculate for some metrics\nPearson’s correlation coefficient\nCovariance (to Value)\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nR like linear regression\nCreate Confusion Matrix\nPrevalence\nSummarize some metrics\nTo Matrix\nTaylor mode forward automatic differentiation\nPandas-like dataframe &amp; series.\nMatrix for Scientific computation\nSparse matrix (CCS format)\nExtra tools for <code>Vec&lt;f64&gt;</code>\nGeneric AD functions\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGradient\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nData Type enum\nVector with <code>DType</code>\nScalar with <code>DType</code>\nGeneric <code>DataFrame</code> structure\nGeneric Scalar\nGeneric Series\nTo handle CSV file format\nTo handle with NetCDF file format\nTo handle parquet format\nAdd series\nType casting for Series\nType casting for DataFrame\nGetter for Series\nDrop specific column by header\nFilter DataFrame by specific column\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck for static numeric type\nLength for Series\nMask DataFrame with a boolean Series\nMul Scalar\nDeclare new DataFrame with <code>Vec&lt;Series&gt;</code>\nPush new pair of head, Series to DataFrame\nRead csv file with delimiter\nRead netcdf to DataFrame\nRead netcdf to DataFrame with specific header\nRead parquet to DataFrame\nExtract specific row as DataFrame\nSelect rows based on indices\nChange header\nSub series\nScalar to length 1 Series\nExplicit type casting for Series\nWrite csv file\nwrite netcdf file\nWrite DataFrame to parquet\nAn archived <code>Matrix</code>\nAn archived <code>Shape</code>\nThe resolver for <code>Shape::Col</code>\nThe archived counterpart of <code>Shape::Col</code>\nTemporary data structure from <code>dgeqrf</code>\nTemporary data structure from <code>dgetrf</code>\n<code>Error</code> is a trait representing the basic expectations for …\nR-like matrix structure\nThe resolver for an archived <code>Matrix</code>\nThe resolver for <code>Shape::Row</code>\nThe archived counterpart of <code>Shape::Row</code>\nTo select matrices’ binding.\nThe resolver for an archived <code>Shape</code>\nAdd column\nAdd column (Mutable)\nAdd row\nAdd row (Mutable)\nMutable slice of <code>self.data</code>\nSlice of <code>self.data</code>\nBackward Substitution for Upper Triangular\nMatrix multiplication with BLAS\nBlock Partition\nChange Bindings\nChange Bindings Mutably\nCholesky Decomposition\nExtract Column\nColumn map\nCombine separated matrix to one matrix\nCovariance Matrix (Column based)\nDeterminant\nExtract diagonal components\nAttempts to downcast the box to a concrete type.\nAttempts to downcast the box to a concrete type.\nAttempts to downcast the box to a concrete type.\nForwards to the method defined on the type <code>dyn Error</code>.\nForwards to the method defined on the type <code>dyn Error</code>.\nReturns some mutable reference to the inner value if it is …\nReturns some reference to the inner value if it is of type …\nForwards to the method defined on the type <code>dyn Error</code>.\nForwards to the method defined on the type <code>dyn Error</code>.\nForward substitution for Lower Triangular\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFrom index operations\nMatrix from series\nGEMM wrapper for Matrixmultiply\nGeneral Matrix-Vector multiplication\nGeneral Vector-Matrix multiplication\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInverse of Matrix\nInverse of Lower matrix\nInverse of upper triangular matrix\nForwards to the method defined on the type <code>dyn Error</code>.\nReturns <code>true</code> if the inner type is the same as <code>T</code>.\nForwards to the method defined on the type <code>dyn Error</code>.\nPeroxide version of <code>dgeqrf</code>\nPeroxide version of <code>dgetrf</code>\nPeroxide version of <code>dgetri</code>\nPeroxide version of <code>dgetrs</code>\nLU Decomposition Implements (Complete Pivot)\nR-like matrix constructor\nColumn Mean\nMatlab-like matrix constructor\nRaw mutable pointer for <code>self.data</code>\nNorm of Matrix\nParallel version of norm\nProvides type-based access to context intended for error …\nMoore-Penrose Pseudo inverse\nRaw pointer for <code>self.data</code>\nPython-like matrix constructor\nQR Decomposition\nR-like matrix constructor (Explicit ver.)\nRead from CSV\nResize matrix\nResize matrix (Mutable)\nExtract Row\nRow map\nRow pointer\nReduced Row Echelon Form\nColumn Standard Deviation\nSolve with Vector\nReturns the lower-level source of this error, if any.\nReturns an iterator starting with the current error and …\nSpread data(1D vector) to 2D formatted String\nSubmatrix\nSubstitute Col\nSubstitute matrix to specific position\nSubstitute Row\nSingular Value Decomposition\nR-like transpose function\nMatrix to <code>Vec&lt;Vec&lt;f64&gt;&gt;</code>\nTranspose\nColumn variance\nWrite to CSV\nWrite to CSV (with round option)\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAn archived <code>Polynomial</code>\nPolynomial Structure\nThe resolver for an archived <code>Polynomial</code>\nBessel Polynomial\nChebyshev Polynomial\nEvaluate polynomial with value according to Horner’s …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHermite Polynomial\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLagrange Polynomial\nLegendre Polynomial\nCreate Polynomial\nConvenient to declare polynomial\nLinear transformation of a polynomial by a given x …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nExplicit version of <code>map</code>\nExplicit version of <code>map</code> in parallel\nExplicit version of <code>zip_with</code> in parallel\nExplicit version of <code>reduce</code>\nExplicit version of <code>zip_with</code>\nMissing operations &amp; comprehensive number structures\nPointer toolbox\nStable implementations for nightly-only features\nFunctional Programming for Matrix and ComplexMatrix\nFunctional Programming tools for Vector\nFunctional Programming for Matrix in Parallel (Uses Rayon …\nFunctional Programming tools for Vector in Parallel (Uses …\nSome algorithms for Vector\nInner product Vector\nLinear operation for Vector\nMatrix Products\nKinds of Vector &amp; Matrix norm\nNormed Vector\nInner product Vector in Parallel\nMatrix Products in Parallel\nNormed Vector in Parallel\nMathematical Vector in Parallel\nVector Products in Parallel\nMathematical Vector\nVector Products\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLinear algebra trait\nData structure for Complete Pivoting LU decomposition\nExtract PQLU\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGenerated Truncated SVD\nPointer for col or row\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nStable Fn trait\nSyntactic sugar for Vector operations\nChoose api - MATLAB, R, Python\nMacro to non macro function\nPlotting module for peroxide\nEasy to print any structures\nUseful missing tools\nMore convenient matrix writer\nConcatenate a value and vector\nR like cbind - concatenate two matrix by column direction\nNumpy like column_stack\nConcatenate two vectors into one\nMATLAB like eye - Identity matrix\neye with custom shape\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMATLAB like linspace\nlinspace with precision\nNumpy like logspace\nRand matrix\nRand matrix with specific rng and distribution\nRand matrix with specific rng\nR like rbind - concatenate two matrix by row direction\nNumpy like row_stack\nR like seq function\nSeq with Precision\nMATLAB like zeros (Matrix)\nZeros with custom shape\nPlot Style (<code>scienceplots</code> should be installed)\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFormat float number into lower exponent notation with ‘+…\nFormat float number into upper exponent notation with ‘+…\nAuto-zip\nVector compare\nFind the index of interval of x\nGenerate Range of Intervals\nNear equal\nSignum function\nGenerate and Zip Range of Intervals\nExtract no-duplicate sample from Vector\nSimple Matrix Writer\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")