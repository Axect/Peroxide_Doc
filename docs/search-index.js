var searchIndex = new Map(JSON.parse('[\
["peroxide",{"doc":"<code>peroxide</code> is comprehensive numerical library for Rust.","t":"QQQQQCQQQCQCCQCQQQQQQQQQCCCCCQQEEPGEEKEERREEEEEEEEEEEEEPEEEEEPPPEEEEEEEEKEEEEEEPEKEEEEEEEEEPEEEEEPNMMQXEMNMNMMNNNNNMNNNMNNNNMMMMMMMNMMMMMNNNNNCCCKKRKKKRKKFFFMNMNNMMNMMNMNNMNNNNNMMMHMNNNNMHNMKKRKKKRKKFFFNNNNNNNNNNNMNMNNMMNMMNNNNNNNNNNNNNNMNNNNNNNNNNNNNMNNNNNNNNNNMNNNMNNNMHNMNNNNMHNNNNMNNNNNNNNNNNNNNNCHCCCCCCCCCFGPFNNONNNNNNNNNNOHOONNNNNNNNNNNNHOONNNNNNNNNNNNONNNPPPPPPPPPPPPPGPNNNNNNNNNNHHNNNNHNNHHNNNNNHHTTFTFKTPFPFGGKKKFFFFFPFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNNMNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNEPEPPEPPGGFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFFFIIIFPPIGKKFPPNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNMNMNNNNNNMNNNNNOOOOONNMNNNNNOOOOONNNNNNNNNNNNNNNNNNNNNNNNPFFPPPPPGKGNNNNNNNNNNNNNNNNNNNNHHNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHHEEEEEEEEEEEKEERREEEEEEEEEEKEEEEEEEEEEEEEEKEEEEEEEEMMQXEMNMNMMEENMEEEEMEEEEEEEEMMMMEEEMMMEECNMMEMMMKKKMMHMHMHMHMMMMMMMMMHMMMMMCCHHHHHHHHHHHHHHHHHCCCCPPPPPPPPPGRKKPGPFGNNNNNNNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNMNNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHHHHHHHHHHHHNPRRNPNPFNPNPNPNPONPNPONPNPNPNPNPGNNPKNNPNPGKONPONPNPPPPPPPPPPRRNNNNNNNNNNNNNNNNNHMHMNNNNNNNNNNNHMMNNPNHMMMNNNNNNNNNNNNNNNMNNNCCCCCCCGPPPFFFFKNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNMNNNNNNNNNNNNNNNNNNNNNNNNNNPPPPPPGGGFPPPPPPPPPPPPPPPPPPPPPFFPPPKKPPPPPPPPPPPPPPPKKKNNNNNNNMNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONOONNNNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNMNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNNMMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNNNMNMNMNMNNNNMNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNNOONNNNNNMNMNMNNMNNNNNNNNNNNNNNNEPFFFFPPKPGPGPKPFPGFIFEPFGGPGPPGPPFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNHMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNHNNNNOONNNNNMNNNHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOONNNNNNNNNNNNNNNNNNNMNNNNNNNNNNNNNNNNNNNNHHHNNNNNNNNHNNNNNNNNNNNNNNNNNNNNNNMNNNHHONNNMNNNOHHHHHHNNNNMNNHNHNNNNNNNNNNNNNNNNNNNNNONNNNNMNNNHNOOMNNNOHNNNNNONNNNNMNNOONNNNONNNNNHMNNMNNNNNNOOOONNNNNNNNNNMNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOONNOONNNNNNNNNNNNNNNNOMNNNNNNNONFNNNNNNNNNNNNNNNNNNKPFPGNNNNNNNNHNNNNONMNNNNNNNNNNNNNNNMNMNNNHHNNNNHNNNNNNNNNNNNNNNNNNNNFNNNNNNNNNONONONNNNNNNNNNNNNNNONNONONNNNNNNNNNNNNHHHHHCCCCCCCCCKMMMKKRMMMMMMMMMMMMMMMMMMMMMKMMMMMMMPKPPPKPPKGKRRKKNMMNNNNMMNNMNMMMMMMNNNNNKKRMMMMMMKMMMKKFKRNNNNMNNNNNMNNNNNMMNNMNNNNNNRKMKKKRRKMMMMNNNNNNMMNNMMCCCCCCCCKKKMMMHHHGPNNNHHNNHHHHNNNNHHHHHHHHHNNNNNNHHPPPPPPPPGPPPPPPPGPPGPEPEPPPPPKFGGGGPPPPPPPPPPPPPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNMNNNNNNNNMNMNNNNNNNNNNNNNNNNNMNMNMNMNMNMNMNMNMNMNMNMNMNMNMNMNMNMNMNMNMNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNKKKNNMHHHHHHHHHHHHHHRKMEPEPPEPGEPFGPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["c","cbind","dnorm","dt","eye","fuga","hstack","linspace","lm","macros","matrix","ml","numerical","pnorm","prelude","pt","rand","rbind","rnorm","rt","runif","seq","single_derivative","single_function","special","statistics","structure","traits","util","vstack","zeros","Akima","Algorithm","Brotli","CompressionOptions","ConvToMat","Diagonal","ExpLogOps","FPMatrix","FPVector","Float","Float","G10K21","G10K21R","G15K31","G15K31R","G20K41","G20K41R","G25K51","G25K51R","G30K61","G30K61R","G7K15","G7K15R","GaussLegendre","Gzip","Identity","InnerProduct","LU","LinearOp","Lower","Lz4","Lz4Raw","Lzo","MatrixProduct","MatrixPtr","MutFP","MutMatrix","NewtonCotes","Norm","Normed","Oxide","PowOps","Quadratic","Real","Redox","RedoxCommon","Scalable","ScalableMut","Snappy","StableFn","TrigOps","Type1","Type2","Type3","Type4","Type5","Type6","Type7","Type8","Type9","Uncompressed","Upper","VecOps","Vector","VectorProduct","WAZ","Zstd","__clone_box","acos","acosh","ad_closure","ad_function","anyhow","asin","asin_acos","asinh","asinh_acosh","atan","atanh","borrow","borrow_mut","clone","clone_into","cos","cosh","eq","equivalent","equivalent","exp","fmt","from","hash","into","ln","log","log10","log2","pow","powf","powi","sin","sin_cos","sinh","sqrt","tan","tanh","to_owned","try_from","try_into","type_id","vzip","julia_macro","matlab_macro","r_macro","CryptoRng","Distribution","Item","IteratorRandom","Rng","RngCore","Seed","SeedableRng","SliceRandom","SmallRng","StdRng","ThreadRng","choose","choose","choose_multiple","choose_multiple","choose_multiple_fill","choose_multiple_weighted","choose_mut","choose_stable","choose_weighted","choose_weighted_mut","fill","fill_bytes","from_entropy","from_rng","from_seed","gen","gen_bool","gen_range","gen_ratio","map","next_u32","next_u64","partial_shuffle","random","sample","sample","sample_iter","sample_iter","seed_from_u64","shuffle","thread_rng","try_fill","try_fill_bytes","CryptoRng","Distribution","Item","IteratorRandom","Rng","RngCore","Seed","SeedableRng","SliceRandom","SmallRng","StdRng","ThreadRng","__clone_box","__clone_box","__clone_box","as_rngcore","as_rngcore","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","choose","choose","choose_multiple","choose_multiple","choose_multiple_fill","choose_multiple_weighted","choose_mut","choose_stable","choose_weighted","choose_weighted_mut","clone","clone","clone","clone_into","clone_into","clone_into","default","eq","eq","equivalent","equivalent","equivalent","equivalent","fill","fill_bytes","fill_bytes","fill_bytes","fill_bytes","fmt","fmt","fmt","from","from","from","from_entropy","from_rng","from_rng","from_rng","from_seed","from_seed","from_seed","gen","gen_bool","gen_range","gen_ratio","into","into","into","map","next_u32","next_u32","next_u32","next_u32","next_u64","next_u64","next_u64","next_u64","partial_shuffle","random","read","sample","sample","sample_iter","sample_iter","seed_from_u64","shuffle","thread_rng","to_owned","to_owned","to_owned","try_fill","try_fill_bytes","try_fill_bytes","try_fill_bytes","try_fill_bytes","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","reg","least_square","eigen","integral","interp","newton","ode","optimize","root","spline","utils","Eigen","EigenMethod","Jacobi","JacobiTemp","__clone_box","__clone_box","a","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","d","eigen","eigenvalue","eigenvector","extract","extract","fmt","fmt","fmt","from","from","from","into","into","into","iter","jacobi","n","n_rot","new","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","v","vzip","vzip","vzip","G10K21","G10K21R","G15K31","G15K31R","G20K41","G20K41R","G25K51","G25K51R","G30K61","G30K61R","G7K15","G7K15R","GaussLegendre","Integral","NewtonCotes","__clone_box","borrow","borrow_mut","change_max_iter","change_tol","clone","clone_into","eq","fmt","from","gauss_kronrod_quadrature","gauss_legendre_quadrature","get_gauss_kronrod_order","get_max_iter","get_num_node","get_tol","integrate","into","is_relative","kronrod_quadrature","newton_cotes_quadrature","to_owned","try_from","try_into","type_id","vzip","chebyshev_nodes","newton","A","BE","BS23","BU","BasicODESolver","ButcherTableau","C","ConstraintViolation","DP45","FixedPoint","GL4","ImplicitSolver","ODEError","ODEIntegrator","ODEProblem","ODESolver","RALS3","RALS4","RK4","RK5","RKF45","ReachedMaxStepIter","TSIT45","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","default","default","default","default","default","default","default","default","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","initial_conditions","into","into","into","into","into","into","into","into","into","into","into","into","max_step_iter","max_step_iter","max_step_iter","max_step_iter","max_step_iter","max_step_size","max_step_size","max_step_size","max_step_size","max_step_size","min_step_size","min_step_size","min_step_size","min_step_size","min_step_size","new","new","new","new","new","new","rhs","safety_factor","safety_factor","safety_factor","safety_factor","safety_factor","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","solve","solve","step","step","step","step","step","step","step","step","step","step","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","tol","tol","tol","tol","tol","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","GaussNewton","GaussNewton","GradientDescent","GradientDescent","InitParam","LevenbergMarquardt","LevenbergMarquardt","MaxIter","OptMethod","OptOption","Optimizer","__clone_box","__clone_box","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","equivalent","equivalent","fmt","fmt","from","from","from","get_domain","get_error","get_hyperparam","hash","into","into","into","new","optimize","partial_cmp","set_init_param","set_lambda_init","set_lambda_max","set_lr","set_max_iter","set_method","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","BisectionMethod","BroydenMethod","FalsePositionMethod","Hess","Intv","Jaco","NewtonMethod","NoRoot","NotConverge","Pt","RootError","RootFinder","RootFindingProblem","SecantMethod","ZeroDerivative","ZeroSecant","__clone_box","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","derivative","find","find","find","find","find","find","fmt","fmt","from","from","from","from","from","from","function","hessian","initial_guess","into","into","into","into","into","into","max_iter","max_iter","max_iter","max_iter","max_iter","max_iter","max_iter","max_iter","max_iter","max_iter","max_iter","to_owned","to_string","tol","tol","tol","tol","tol","tol","tol","tol","tol","tol","tol","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","Akima","CubicHermiteSpline","CubicSpline","NotEnoughNodes","NotEqualNodes","NotEqualSlopes","Quadratic","RedundantNodeX","SlopeMethod","Spline","SplineError","__clone_box","__clone_box","__clone_box","__clone_box","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cubic_hermite_spline","cubic_spline","default","default","derivative","derivative","deserialize","deserialize","eq","equivalent","equivalent","eval","eval_vec","eval_vec_with_cond","eval_with_cond","extend_with_nodes","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_nodes","from_nodes","from_nodes_with_slopes","get_ranged_polynomials","get_ranged_polynomials","get_ranged_polynomials","index","index","integral","integral","integrate","integrate","into","into","into","into","into","into","into","into","number_of_polynomials","polynomial_at","serialize","serialize","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","jacobian","tdma","Algorithm","Calculus","Col","ConvToMat","CubicHermiteSpline","CubicSpline","DType","DTypeArray","DTypeValue","DataFrame","Eigen","ExpLogOps","FPMatrix","FPVector","Float","Float","InnerProduct","LinearOp","Matrix","MatrixProduct","MatrixPtr","MutFP","MutMatrix","Oxide","PQLU","Polynomial","PowOps","QR","Real","Redox","RedoxCommon","Row","Scalable","ScalableMut","Scalar","Series","Shape","SimpleNorm","SimpleParquet","SimplerLinearAlgebra","Spline","TrigOps","TypedScalar","TypedVector","VecOps","Vector","VectorProduct","WAZD","WithCSV","WithNetCDF","acos","acosh","ad_closure","ad_function","anyhow","asin","asin_acos","asinh","asinh_acosh","atan","atanh","chebyshev_polynomial","combine","cos","cosh","cubic_hermite_spline","cubic_spline","diag","eigen","exp","gemm","gemv","gen_householder","integrate","inv_l","inv_u","lagrange_polynomial","legendre_polynomial","ln","log","log10","log2","matrix","ml_matrix","poly","pow","powf","powi","py_matrix","r_matrix","simpler","sin","sin_cos","sinh","solve","sqrt","tan","tanh","SimpleNorm","SimpleParquet","SimplerLinearAlgebra","back_subs","block","chebyshev_polynomial","cholesky","cubic_hermite_spline","det","eigen","forward_subs","integrate","inv","is_symmetric","lu","norm","normalize","pseudo_inv","qr","read_parquet","rref","solve","solve","solve_mat","waz","waz_diag","write_parquet","function","lanczos","beta","erf","erfc","gamma","gaussian","inc_beta","inc_gamma","inv_erf","inv_erfc","inv_inc_gamma","inv_inv_beta","ln_gamma","phi","poch","gamma_approx","ln_gamma_approx","tlg1","dist","ops","rand","stat","AllZeroWeightError","Bernoulli","Beta","Binomial","EmptyWeightError","Gamma","LengthMismatchError","NoNonZeroIntervalError","Normal","OPDist","Parameter","ParametricDist","RNG","StudentT","TPDist","Uniform","WeightedUniform","WeightedUniformError","__clone_box","__clone_box","__clone_box","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cdf","cdf","cdf","cdf","clone","clone","clone","clone_into","clone_into","clone_into","cor","cor","cor","cov","cov","cov","domain_linspace","domain_seq","fmt","fmt","fmt","fmt","from","from","from","from","from_max_pool_1d","interval_at","intervals","into","into","into","into","mean","mean","mean","new","params","params","params","params","pdf","pdf","pdf","pdf","print","print","sample","sample_with_rng","sample_with_rng","sample_with_rng","sample_with_rng","sd","sd","sd","sum","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","update_intervals","update_weights","var","var","var","vzip","vzip","vzip","vzip","weight_at","weights","C","H","P","double_factorial","factorial","marsaglia_polar","prs","prs_with_rng","rand_num","smallrng_from_seed","stdrng_from_seed","ziggurat","ACC","ACC","Array","Array","BA","BA","BM","BM","ConfusionMatrix","DOR","DOR","F1","F1","FDR","FDR","FM","FM","FN","FNR","FNR","FOR","FOR","FP","FPR","FPR","LR_minus","LR_minus","LR_plus","LR_plus","MCC","MCC","MK","MK","Metric","N","NPV","NPV","OrderedStat","P","PPV","PPV","PT","PT","QType","Statistics","TN","TNR","TNR","TP","TPR","TPR","TS","TS","Type1","Type2","Type3","Type4","Type5","Type6","Type7","Type8","Type9","Value","Value","__clone_box","__clone_box","__clone_box","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","calc_metric","calc_metrics","clone","clone","clone","clone_into","clone_into","clone_into","cor","cor","cov","cov","eq","fmt","fmt","fmt","fmt","from","from","from","into","into","into","lm","mean","median","new","prevalence","prevalence","print","quantile","quantile","quantiles","sd","summary","to_matrix","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","var","vzip","vzip","vzip","ad","dataframe","matrix","multinomial","polynomial","sparse","vector","AD","AD0","AD1","AD2","ADFn","ADIntoIter","ADIter","ADIterMut","ADVec","__clone_box","acos","acosh","add","add","asin","asinh","atan","atanh","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call_stable","call_stable","call_stable","call_stable","call_stable","call_stable","clone","clone_into","cosh","ddx","ddx_mut","ddx_ref","div","div","dx","dx_mut","dx_ref","empty","eq","exp","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_f64","from_iter","from_iter","from_order","grad","index","index_mut","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","is_empty","iter","iter_mut","len","len","len","ln","log","log10","log2","mul","mul","neg","new","next","next","next","next_back","next_back","order","partial_cmp","pow","powf","powi","print","set_ddx","set_dx","set_x","sin_cos","sinh","size_hint","size_hint","size_hint","sqrt","sub","sub","tan","tanh","to_ad","to_ad_vec","to_f64","to_f64_vec","to_order","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","x","x_mut","x_ref","Bool","Bool","Bool","Char","Char","Char","DType","DTypeArray","DTypeValue","DataFrame","F32","F32","F32","F64","F64","F64","I16","I16","I16","I32","I32","I32","I64","I64","I64","I8","I8","I8","ISIZE","ISIZE","ISIZE","Scalar","Series","Str","Str","Str","TypedScalar","TypedVector","U16","U16","U16","U32","U32","U32","U64","U64","U64","U8","U8","U8","USIZE","USIZE","USIZE","WithCSV","WithNetCDF","WithParquet","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","add_vec","as_slice","as_slice","as_slice","as_slice","as_slice","as_slice","as_slice","as_slice","as_slice","as_slice","as_slice","as_slice","as_slice","as_slice","as_slice","as_slice","as_slice_mut","as_slice_mut","as_slice_mut","as_slice_mut","as_slice_mut","as_slice_mut","as_slice_mut","as_slice_mut","as_slice_mut","as_slice_mut","as_slice_mut","as_slice_mut","as_slice_mut","as_slice_mut","as_slice_mut","as_slice_mut","as_type","as_types","at","at_raw","at_raw","at_raw","at_raw","at_raw","at_raw","at_raw","at_raw","at_raw","at_raw","at_raw","at_raw","at_raw","at_raw","at_raw","at_raw","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","data","drop","dtype","dtype","eq","eq","eq","eq","eq","eq","equivalent","equivalent","filter","filter","filter","filter","filter","filter","filter","filter","filter","filter","filter","filter","filter","filter","filter","filter","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","fold","from","from","from","from","from","from","header","header_mut","ics","index","index","index_mut","index_mut","into","into","into","into","into","into","is_integer","is_numeric","len","map","map","map","map","map","map","map","map","map","map","map","map","map","map","map","map","mul_scalar","mut_map","mut_map","mut_map","mut_map","mut_map","mut_map","mut_map","mut_map","mut_map","mut_map","mut_map","mut_map","mut_map","mut_map","mut_map","mut_map","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","partial_cmp","print","print","print","print","print","push","push","push","push","push","push","push","push","push","push","push","push","push","push","push","push","push","read_csv","read_csv","read_nc","read_nc","read_nc_by_header","read_nc_by_header","read_parquet","read_parquet","read_parquet","row","set_header","skip","skip","skip","skip","skip","skip","skip","skip","skip","skip","skip","skip","skip","skip","skip","skip","skip_while","skip_while","skip_while","skip_while","skip_while","skip_while","skip_while","skip_while","skip_while","skip_while","skip_while","skip_while","skip_while","skip_while","skip_while","skip_while","spread","sub_vec","take","take","take","take","take","take","take","take","take","take","take","take","take","take","take","take","take_while","take_while","take_while","take_while","take_while","take_while","take_while","take_while","take_while","take_while","take_while","take_while","take_while","take_while","take_while","take_while","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_series","to_string","to_string","to_string","to_string","to_string","to_type","to_vec","to_vec","to_vec","to_vec","to_vec","to_vec","to_vec","to_vec","to_vec","to_vec","to_vec","to_vec","to_vec","to_vec","to_vec","to_vec","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","unwrap","value","values","vzip","vzip","vzip","vzip","vzip","vzip","write_csv","write_csv","write_nc","write_nc","write_parquet","write_parquet","write_parquet","zip_with","zip_with","zip_with","zip_with","zip_with","zip_with","zip_with","zip_with","zip_with","zip_with","zip_with","zip_with","zip_with","zip_with","zip_with","zip_with","Col","Col","DGEQRF","DGESVD","DGETRF","DPOTRF","Diagonal","Diverge","Error","Failed","Form","Identity","LAPACK_STATUS","LU","LinearAlgebra","Lower","Matrix","NonSingular","POSITIVE_STATUS","PQLU","Perms","QR","Row","Row","SVD","SVD_STATUS","Shape","Singular","SolveKind","Success","Success","UPLO","Upper","WAZ","WAZD","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","acos","acosh","add","add","add","add","add_col","add_col_mut","add_row","add_row_mut","add_vec","apply","as_mut_slice","as_slice","asin","asinh","atan","atanh","back_subs","back_subs","back_subs","blas_mul","block","block","block","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cause","change_shape","change_shape_mut","cholesky","cholesky","cholesky","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","col","col","col_map","col_mut","col_mut_map","col_ptr","col_reduce","combine","cor","cos","cosh","cov","d","data","default","default","description","deserialize","deserialize","det","det","det","det","diag","diag","div","div","div","div","div","div","div","div","div","dot","downcast","downcast","downcast","downcast_mut","downcast_mut","downcast_mut","downcast_ref","downcast_ref","downcast_ref","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","exp","extract","fact_mat","fact_mat","fact_mat","fmap","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","forward_subs","forward_subs","forward_subs","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_index","from_series","gemm","gemv","gen_householder","get_L","get_L","get_P","get_Q","get_R","get_U","get_U","get_cond","gevm","hadamard","index","index_mut","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","inv","inv","inv","inv","inv_l","inv_u","ipiv","is","is","is","is_symmetric","is_symmetric","is_symmetric","kronecker","l","lapack_dgeqrf","lapack_dgesvd","lapack_dgetrf","lapack_dgetri","lapack_dgetrs","lapack_dpotrf","ln","log","log10","log2","lu","lu","lu","matrix","mean","ml_matrix","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul_scalar","mut_ptr","neg","neg","new","new","new","norm","norm","normalize","normalize","p","pow","powf","powi","print","provide","pseudo_inv","pseudo_inv","pseudo_inv","ptr","py_matrix","q","q","q","qr","qr","qr","r","r","r_matrix","read","reduce","reshape","reshape_mut","row","row","row_map","row_mut","row_mut_map","row_ptr","row_reduce","rref","rref","rref","s","s","s_mat","sd","serialize","serialize","shape","sin","sin_cos","sinh","skip_col","skip_row","solve","solve","solve","solve","solve_mat","solve_mat","solve_mat","source","sources","spread","sqrt","status","status","status","status","sub","sub","sub","sub","sub_vec","submat","subs","subs_col","subs_mat","subs_row","svd","svd","swap","swap_with_perm","t","take_col","take_row","tan","tanh","tau","to_diag","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_vec","transpose","truncated","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","u","u","u","u","uplo","var","vt","vt","vt","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","w","waz","waz","waz","waz_diag","write","write_round","write_with_header","write_with_header_round","z","zip_with","Multinomial","__clone_box","borrow","borrow_mut","clone","clone_into","eval","fmt","fmt","from","into","new","print","to_owned","to_string","try_from","try_into","type_id","vzip","Calculus","First","Polynomial","Second","SpecialKind","__clone_box","__clone_box","add","add","borrow","borrow","borrow_mut","borrow_mut","chebyshev_polynomial","clone","clone","clone_into","clone_into","coef","default","derivative","derivative","deserialize","div","div","eq","equivalent","equivalent","eval","eval_vec","fmt","fmt","fmt","from","from","horner_division","integral","integral","integrate","integrate","into","into","lagrange_polynomial","legendre_polynomial","mul","mul","neg","new","poly","pow","powf","powi","print","serialize","sqrt","sub","sub","to_owned","to_owned","to_string","translate_x","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","SPMatrix","__clone_box","apply","back_subs","block","borrow","borrow_mut","cholesky","clone","clone_into","col","col_ptr","col_ptr","data","data","det","fmt","forward_subs","from","from_dense","into","into","inv","is_symmetric","lu","mul","mul","mul","mul","new","nnz","pseudo_inv","qr","row","row_ics","row_ics","rref","solve","solve_mat","svd","t","to_dense","to_owned","transpose","try_from","try_into","type_id","vzip","waz","blas_daxpy","blas_daxpy_return","map","reduce","zip_with","float","fp","general","math","mutable","num","pointer","stable","sugar","FloatWithPrecision","ceil_with_precision","floor_with_precision","round_with_precision","FPMatrix","FPVector","Scalar","col_map","col_mut_map","col_reduce","filter","fmap","fmap","prod","reduce","reduce","row_map","row_mut_map","row_reduce","skip","skip_col","skip_row","sum","take","take_col","take_row","zip_with","zip_with","Algorithm","arg_max","arg_min","max","min","rank","sign","swap_with_perm","F","InnerProduct","L1","L2","LInf","LinearOp","Lp","Lpq","MatrixProduct","Norm","Normed","Scalar","UnsignedScalar","Vector","VectorProduct","__clone_box","add_vec","apply","borrow","borrow_mut","clone","clone_into","cross","dot","fmt","from","hadamard","into","kronecker","mul_scalar","norm","normalize","outer","sub_vec","to_owned","try_from","try_into","type_id","vzip","MutFP","MutMatrix","Scalar","col_mut","mut_map","mut_zip_with","row_mut","swap","swap_with_perm","Real","from_f64","to_ad","to_f64","MatrixPtr","Oxide","Redox","RedoxCommon","ToRedox","add","add","borrow","borrow_mut","col_ptr","deref","div","div","fmt","from","from_vec","from_vec","from_vec","into","mul","mul","ox","red","red","red","row_ptr","sub","sub","try_from","try_into","type_id","vzip","Output","StableFn","call_stable","ConvToMat","Scalable","ScalableMut","Vec","Vec","VecOps","add_col","add_col_mut","add_row","add_row_mut","add_s","add_v","div_s","div_v","mul_s","mul_v","reshape","reshape_mut","sub_s","sub_v","to_col","to_row","api","low_level","non_macro","plot","print","useful","wrapper","writer","MATLAB","PYTHON","R","new","new","new","copy_vec_ptr","ptr_to_vec","swap_vec_ptr","ConcatenateError","DifferentLength","__clone_box","borrow","borrow_mut","cat","cbind","clone","clone_into","column_stack","concat","eye","eye_shape","fmt","fmt","from","into","linspace","linspace_with_precision","logspace","rand","rand_with_rng","rbind","row_stack","seq","seq_with_precision","to_owned","to_string","try_from","try_into","type_id","vzip","zeros","zeros_shape","Bar","Circle","DashDot","Dashed","Default","Diamond","Domain","Dotted","Grid","HLine","Hexagon1","Hexagon2","IEEE","Images","Legends","Line","LineStyle","Linear","Log","Markers","Nature","Off","Off","On","On","Pairs","Path","Pentagon","Pixel","Plot","Plot2D","PlotOptions","PlotScale","PlotStyle","PlotType","Plus","Point","Scatter","Science","Solid","Square","Star","ThinDiamond","TriangleDown","TriangleLeft","TriangleRight","TriangleUp","VLine","X","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","grid","grid","hash","hash","hash","hash","hash","hash","hash","insert_image","insert_image","insert_pair","insert_pair","into","into","into","into","into","into","into","into","new","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","savefig","savefig","set_alpha","set_alpha","set_color","set_color","set_domain","set_domain","set_dpi","set_dpi","set_fig_size","set_fig_size","set_legend","set_legend","set_line_style","set_line_style","set_marker","set_marker","set_path","set_path","set_plot_type","set_plot_type","set_style","set_style","set_title","set_title","set_xlabel","set_xlabel","set_xlim","set_xlim","set_xscale","set_xscale","set_ylabel","set_ylabel","set_ylim","set_ylim","set_yscale","set_yscale","set_zlabel","set_zlabel","tight_layout","tight_layout","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","LowerExpWithPlus","Printable","UpperExpWithPlus","fmt_lower_exp","fmt_upper_exp","print","auto_zip","choose_longer_vec","choose_shorter_string","choose_shorter_vec","eq_vec","find_interval","gen_range","max","min","nearly_eq","quot_rem","sgn","tab","zip_range","Item","SampleRNG","sample","Data","Data","Header","Header","Matrix","Path","Path","Queue","Round","Round","SimpleWriter","ToWriter","Vector","__clone_box","__clone_box","__clone_box","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","eq","equivalent","equivalent","fmt","fmt","fmt","from","from","from","hash","insert_header","insert_matrix","insert_vector","into","into","into","new","partial_cmp","set_path","set_round_level","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","write_csv"],"q":[[0,"peroxide"],[31,"peroxide::fuga"],[142,"peroxide::macros"],[145,"peroxide::macros::matlab_macro"],[190,"peroxide::macros::r_macro"],[300,"peroxide::ml"],[301,"peroxide::ml::reg"],[302,"peroxide::numerical"],[311,"peroxide::numerical::eigen"],[363,"peroxide::numerical::integral"],[404,"peroxide::numerical::interp"],[405,"peroxide::numerical::newton"],[406,"peroxide::numerical::ode"],[656,"peroxide::numerical::optimize"],[717,"peroxide::numerical::root"],[820,"peroxide::numerical::spline"],[923,"peroxide::numerical::utils"],[925,"peroxide::prelude"],[1023,"peroxide::prelude::simpler"],[1050,"peroxide::special"],[1052,"peroxide::special::function"],[1066,"peroxide::special::lanczos"],[1069,"peroxide::statistics"],[1073,"peroxide::statistics::dist"],[1185,"peroxide::statistics::ops"],[1190,"peroxide::statistics::rand"],[1197,"peroxide::statistics::stat"],[1323,"peroxide::structure"],[1330,"peroxide::structure::ad"],[1475,"peroxide::structure::dataframe"],[1949,"peroxide::structure::matrix"],[2471,"peroxide::structure::multinomial"],[2490,"peroxide::structure::polynomial"],[2559,"peroxide::structure::sparse"],[2608,"peroxide::structure::vector"],[2613,"peroxide::traits"],[2622,"peroxide::traits::float"],[2626,"peroxide::traits::fp"],[2650,"peroxide::traits::general"],[2658,"peroxide::traits::math"],[2697,"peroxide::traits::mutable"],[2706,"peroxide::traits::num"],[2710,"peroxide::traits::pointer"],[2742,"peroxide::traits::stable"],[2745,"peroxide::traits::sugar"],[2767,"peroxide::util"],[2775,"peroxide::util::api"],[2781,"peroxide::util::low_level"],[2784,"peroxide::util::non_macro"],[2818,"peroxide::util::plot"],[3057,"peroxide::util::print"],[3063,"peroxide::util::useful"],[3077,"peroxide::util::wrapper"],[3080,"peroxide::util::writer"],[3144,"dyn_clone::sealed"],[3145,"core::fmt"],[3146,"core::fmt"],[3147,"core::hash"],[3148,"core::any"],[3149,"core::option"],[3150,"core::marker"],[3151,"rand::seq"],[3152,"alloc::vec"],[3153,"rand::distributions::weighted_index"],[3154,"core::convert"],[3155,"core::ops::function"],[3156,"rand::distributions::uniform"],[3157,"rand::rng"],[3158,"core::default"],[3159,"core::convert"],[3160,"rand::distributions::uniform"],[3161,"rand::distributions::distribution"],[3162,"core::fmt"],[3163,"anyhow"],[3164,"serde::ser"],[3165,"anyhow"],[3166,"core::cmp"],[3167,"core::ops::range"],[3168,"alloc::boxed"],[3169,"core::cmp"],[3170,"core::fmt"],[3171,"core::error"],[3172,"core::error"]],"d":["R like concatenate (Type: Vec&lt;f64&gt;)","R like cbind","R like <code>dnorm</code>","R like <code>dt</code>","MATLAB like eye - identity matrix","Choose what you want.","","MATLAB like linspace","R like lm","Useful macros","More R like Matrix constructor (Macro)","Machine learning tools","Differential equations &amp; Numerical Analysis tools","R like <code>pnorm</code>","Do not disturbed. Just use.","R like <code>pt</code>","MATLAB like rand - random matrix","R like rbind","R like random normal","R like random Student’s t","R like random uniform","R like seq macro","Macro for single derivative","Macro for single function","Special function module","Statistical Modules","Main structures for peroxide","","Utility - plot, print, pickle and etc.","","MATLAB like zeros - zero matrix","","","","Defines the compression settings for writing a parquet …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","R like macros","A marker trait used to indicate that an <code>RngCore</code> or …","Types (distributions) that can be used to create a random …","The element type.","Extension trait on iterators, providing random sampling …","An automatically-implemented extension trait on <code>RngCore</code> …","The core of a random number generator.","Seed type, which is restricted to types …","A random number generator that can be explicitly seeded.","Extension trait on slices, providing random mutation and …","A small-state, fast non-crypto PRNG","The standard RNG. The PRNG algorithm in <code>StdRng</code> is chosen …","A reference to the thread-local generator","Returns a reference to one random element of the slice, or …","Choose one element at random from the iterator.","Chooses <code>amount</code> elements from the slice at random, without …","Collects <code>amount</code> values at random from the iterator into a …","Collects values at random from the iterator into a …","Similar to <code>choose_multiple</code>, but where the likelihood of …","Returns a mutable reference to one random element of the …","Choose one element at random from the iterator.","Similar to <code>choose</code>, but where the likelihood of each …","Similar to <code>choose_mut</code>, but where the likelihood of each …","Fill any type implementing <code>Fill</code> with random data","Fill <code>dest</code> with random data.","Creates a new instance of the RNG seeded via <code>getrandom</code>.","Create a new PRNG seeded from another <code>Rng</code>.","Create a new PRNG using the given seed.","Return a random value supporting the <code>Standard</code> distribution.","Return a bool with a probability <code>p</code> of being true.","Generate a random value in the given range.","Return a bool with a probability of <code>numerator/denominator</code> …","Create a distribution of values of ‘S’ by mapping the …","Return the next random <code>u32</code>.","Return the next random <code>u64</code>.","Shuffle a slice in place, but exit early.","Generates a random value using the thread-local random …","Generate a random value of <code>T</code>, using <code>rng</code> as the source of …","Sample a new value, using the given distribution.","Create an iterator that generates random values of <code>T</code>, …","Create an iterator that generates values using the given …","Create a new PRNG using a <code>u64</code> seed.","Shuffle a mutable slice in place.","Retrieve the lazily-initialized thread-local random number …","Fill any type implementing <code>Fill</code> with random data","Fill <code>dest</code> entirely with random data.","A marker trait used to indicate that an <code>RngCore</code> or …","Types (distributions) that can be used to create a random …","The element type.","Extension trait on iterators, providing random sampling …","An automatically-implemented extension trait on <code>RngCore</code> …","The core of a random number generator.","Seed type, which is restricted to types …","A random number generator that can be explicitly seeded.","Extension trait on slices, providing random mutation and …","A small-state, fast non-crypto PRNG","The standard RNG. The PRNG algorithm in <code>StdRng</code> is chosen …","A reference to the thread-local generator","","","","","","","","","","","","Returns a reference to one random element of the slice, or …","Choose one element at random from the iterator.","Chooses <code>amount</code> elements from the slice at random, without …","Collects <code>amount</code> values at random from the iterator into a …","Collects values at random from the iterator into a …","Similar to <code>choose_multiple</code>, but where the likelihood of …","Returns a mutable reference to one random element of the …","Choose one element at random from the iterator.","Similar to <code>choose</code>, but where the likelihood of each …","Similar to <code>choose_mut</code>, but where the likelihood of each …","","","","","","","","","","","","","","Fill any type implementing <code>Fill</code> with random data","Fill <code>dest</code> with random data.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates a new instance of the RNG seeded via <code>getrandom</code>.","Create a new PRNG seeded from another <code>Rng</code>.","","","Create a new PRNG using the given seed.","","","Return a random value supporting the <code>Standard</code> distribution.","Return a bool with a probability <code>p</code> of being true.","Generate a random value in the given range.","Return a bool with a probability of <code>numerator/denominator</code> …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a distribution of values of ‘S’ by mapping the …","Return the next random <code>u32</code>.","","","","Return the next random <code>u64</code>.","","","","Shuffle a slice in place, but exit early.","Generates a random value using the thread-local random …","","Generate a random value of <code>T</code>, using <code>rng</code> as the source of …","Sample a new value, using the given distribution.","Create an iterator that generates random values of <code>T</code>, …","Create an iterator that generates values using the given …","Create a new PRNG using a <code>u64</code> seed.","Shuffle a mutable slice in place.","Retrieve the lazily-initialized thread-local random number …","","","","Fill any type implementing <code>Fill</code> with random data","Fill <code>dest</code> entirely with random data.","","","","","","","","","","","","","","","","","Simple Least Square 2D","To find Eigenvalue &amp; Eigenvector","","","","Ordinary Differential Equation (ODE) Solvers","To optimize parametric model (non-linear regression)","Root Finding Methods","Spline interpolations","","","","","To do Jacobi method","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Main Jacobi traits","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Gauss Kronrod Quadrature","Gauss Legendre Quadrature","","","","","Numerical Integration","Calls <code>U::from(self)</code>.","","","Newton Cotes Quadrature","","","","","","","Newton-Raphson Method","","","Bogacki-Shampine 3(2) method","","A basic ODE solver using a specified integrator.","Trait for Butcher tableau","","","Dormand-Prince 5(4) method","","Gauss-Legendre 4th order integrator.","Enum for implicit solvers.","Enum for ODE errors.","Trait for ODE integrators.","Trait for defining an ODE problem.","Trait for ODE solvers.","Ralston’s 3rd order integrator","Ralston’s 4th order integrator.","Runge-Kutta 4th order integrator.","Runge-Kutta 5th order integrator","Runge-Kutta-Fehlberg 4/5th order integrator.","","Tsitouras 5(4) method","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Optimizer for optimization (non-linear regression)","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Get domain","Get error","Get hyperparameter (learning rate or lambda or etc.)","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Main function for optimization","","Set initial parameter","Set initial lambda for <code>LevenbergMarquardt</code>","Set maximum lambda for <code>LevenbergMarquardt</code>","Set learning rate for <code>GradientDescent</code>","Set maximum iteration","Set optimization method","","","","","","","","","","","","","","","Bisection method","Broyden method","False position method","Hessian alias (<code>[[[f64; C]; C]; R]</code>)","Interval alias (<code>([f64; N], [f64; N])</code>)","Jacobian alias (<code>[[f64; C]; R]</code>)","Newton method","","","Point alias (<code>[f64; N]</code>)","","Trait to define a root finder","Trait to define a root finding problem","Secant method","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Cubic Spline (Natural)","","","","","","","Trait for spline interpolation","","","","","","","","","","","","","","","","","","","","","","","Cubic Spline (Natural)","","","","","","","","","","","","","","Extends the spline with the given nodes.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Examples","","","","","","","","","","","","Calls <code>U::from(self)</code>.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","Jacobian Matrix","TriDiagonal Matrix Algorithm (TDMA)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Simple Norm","Simple handle parquet","Simple Linear algebra","","","Simple Chebyshev Polynomial (First Kind)","","","","Simple Eigenpair","","Simple integrate","","","","","","","","","","Simple solve","","","","","","","Lanczos approximation Coefficient generator","Beta function","Error function","Complement error function","Gamma function","Gaussian function","Regularized incomplete Beta function","Regularized incomplete gamma integral (Lower)","Inverse error function","Inverse complementary error function","Inverse of regularized incomplete gamma integral (Lower)","Inverse regularized incomplete beta function","Logarithm Gamma function","Phi (CDF for Normal Dist)","Pochhammer symbol","","","Lanczos Approximation Coefficient","Probabilistic distributions","","Random number generator","Basic statistics","","","","","","","","","","One parameter distribution","","Extract parameter","Random Number Generator trait","","Two parameter distribution","","","","","","","","","","","","","","","Cumulative Distribution Function","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Create WeightedUniform from max pooling","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Create a new weighted uniform distribution","","","","","Probability Distribution Function","","","","","","Extract samples of distributions","Extract samples of distributions with rng","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Combination","Combination with Repetition","Permutation","Double Factorial","Factorial","Gaussian random number generator using Marsaglia polar form","Piecewise Rejection Sampling","Piecewise Rejection Sampling with specific Rng","Simple uniform random number generator with ThreadRng","Small random number generator from seed","Std random number generator from seed","Gaussian random numbers using the Ziggurat Method","Accuracy","","","","Balanced Accuracy","","Bookmaker Informedness (Informedness)","","Confusion Matrix","Diagnostic Odds Ratio","","F1 Score","","False Discovery Rate","","Fowlkes-Mallows Index","","","False Negative Rate (Miss-rate)","","False Omission Rate","","","False Positive Rate (Fall-out)","","Negative Likelihood Ratio","","Positive Likelihood Ratio","","Matthews Correlation Coefficient (Phi Coefficient)","","Markedness (deltaP)","","","Condition Negative","Negative Predictive Value","","Trait for Ordered Statistics","Condition Positive","Positive Predictive Value (Precision)","","Prevalence Threshold","","R Quantile Type enums","Statistics Trait","","True Negative Rate (Specificity, Selectivity)","","","True Positive Rate (Sensitivity, Recall, Hit-rate)","","Threat Score (Critical Success Index)","","","","","","","","","","","","","","","","","","","","","","Calculate a specific metric","Calculate for some metrics","","","","","","","Pearson’s correlation coefficient","","Covariance (to Value)","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","R like linear regression","","","Create Confusion Matrix","Prevalence","","","","","","","Summarize some metrics","To Matrix","","","","","","","","","","","","","","","","","","Taylor mode forward automatic differentiation","Pandas-like dataframe &amp; series.","Matrix for Scientific computation","","","Sparse matrix (CCS format)","Extra tools for <code>Vec&lt;f64&gt;</code>","","","","","Generic AD functions","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Gradient","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Data Type enum","Vector with <code>DType</code>","Scalar with <code>DType</code>","Generic <code>DataFrame</code> structure","","","","","","","","","","","","","","","","","","","","","","Generic Scalar","Generic Series","","","","","","","","","","","","","","","","","","","","","To handle CSV file format","To handle with NetCDF file format","To handle parquet format","","","","","","","Add series","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Type casting for Series","Type casting for DataFrame","Getter for Series","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Drop specific column by header","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Check for static numeric type","Length for Series","","","","","","","","","","","","","","","","","Mul Scalar","","","","","","","","","","","","","","","","","","","Declare new DataFrame with <code>Vec&lt;Series&gt;</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Push new pair of head, Series to DataFrame","","","","","","","","","","","","","","","","","Read csv file with delimiter","","Read netcdf to DataFrame","","Read netcdf to DataFrame with specific header","","","Read parquet to DataFrame","Extract specific row as DataFrame","Change header","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Sub series","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Scalar to length 1 Series","","","","","","Explicit type casting for Series","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Write csv file","","write netcdf file","","","Write DataFrame to parquet","","","","","","","","","","","","","","","","","","","Temporary data structure from <code>dgeqrf</code>","","Temporary data structure from <code>dgetrf</code>","","","","<code>Error</code> is a trait representing the basic expectations for …","","","","","","Linear algebra trait","","R-like matrix structure","","","Data structure for Complete Pivoting LU decomposition","","","","","","","To select matrices’ binding.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Add column","Add column (Mutable)","Add row","Add row (Mutable)","","","Mutable slice of <code>self.data</code>","Slice of <code>self.data</code>","","","","","","","Backward Substitution for Upper Triangular","Matrix multiplication with BLAS","","Block Partition","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Change Bindings","Change Bindings Mutably","","","Cholesky Decomposition","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Extract Column","","Column map","","","","","Combine separated matrix to one matrix","","","","Covariance Matrix (Column based)","","","","","","","","","Determinant","","","","Extract diagonal components","","","","","","","","","","","Attempts to downcast the box to a concrete type.","Attempts to downcast the box to a concrete type.","Attempts to downcast the box to a concrete type.","Returns some mutable reference to the inner value if it is …","Forwards to the method defined on the type <code>dyn Error</code>.","Forwards to the method defined on the type <code>dyn Error</code>.","Forwards to the method defined on the type <code>dyn Error</code>.","Forwards to the method defined on the type <code>dyn Error</code>.","Returns some reference to the inner value if it is of type …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Forward substitution for Lower Triangular","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","From index operations","Matrix from series","GEMM wrapper for Matrixmultiply","General Matrix-Vector multiplication","","","","","","","","","","General Vector-Matrix multiplication","","","","Calls <code>U::from(self)</code>.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Inverse of Matrix","","","Inverse of Lower matrix","Inverse of upper triangular matrix","","Forwards to the method defined on the type <code>dyn Error</code>.","Forwards to the method defined on the type <code>dyn Error</code>.","Returns <code>true</code> if the inner type is the same as <code>T</code>.","","","","","","Peroxide version of <code>dgeqrf</code>","","Peroxide version of <code>dgetrf</code>","Peroxide version of <code>dgetri</code>","Peroxide version of <code>dgetrs</code>","","","","","","","","LU Decomposition Implements (Complete Pivot)","R-like matrix constructor","Column Mean","Matlab-like matrix constructor","","","","","","","","","","","","Raw mutable pointer for <code>self.data</code>","","","","","","","","","","","","","","","Provides type based access to context intended for error …","","Moore-Penrose Pseudo inverse","","Raw pointer for <code>self.data</code>","Python-like matrix constructor","","","","","QR Decomposition","","","","R-like matrix constructor (Explicit ver.)","Read from CSV","","Resize matrix","Resize matrix (Mutable)","Extract Row","","Row map","","","Row pointer","","","","Reduced Row Echelon Form","","","","Column Standard Deviation","","","","","","","","","","","Solve with Vector","","","","","The lower-level source of this error, if any.","Returns an iterator starting with the current error and …","Spread data(1D vector) to 2D formatted String","","","","","","","","","","","Submatrix","Should check shape","Substitute Col","Substitute matrix to specific position","Substitute Row","","Singular Value Decomposition","","","R-like transpose function","","","","","","","","","","","","","","","","","","","","","","","","","Matrix to <code>Vec&lt;Vec&lt;f64&gt;&gt;</code>","Transpose","Generated Truncated SVD","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Column variance","","","","","","","","","","","","","","","","","","","","","","","","","Write to CSV","Write to CSV (with round option)","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Polynomial Structure","","","","","","","","","","","Chebyshev Polynomial","","","","","","","","","","","","","","","Evaluate polynomial with value according to Horner’s …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Lagrange Polynomial","Legendre Polynomial","","","","Create Polynomial","Convenient to declare polynomial","","","","","","","","","","","","Linear transformation of a polynomial by a given x …","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Explicit version of <code>map</code>","Explicit version of <code>reduce</code>","Explicit version of <code>zip_with</code>","","","","","","Missing operations &amp; comprehensive number structures","Pointer toolbox","Stable implementations for nightly-only features","","","","","","Functional Programming for Matrix","Functional Programming tools for Vector","","","","","","","","","","","","","","","","","","","","","","","Some algorithms for Vector","","","","","","","","","Inner product Vector","","","","Linear operation for Vector","","","Matrix Products","Kinds of Vector &amp; Matrix norm","Normed Vector","","","Mathematical Vector","Vector Products","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","Pointer for col or row","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Stable Fn trait","","","","","","","Syntactic sugar for Vector operations","","","","","","","","","","","","","","","","","Choose api - MATLAB, R, Python","","Macro to non macro function","Plotting module for peroxide","Easy to print any structures","Useful missing tools","","More convenient matrix writer","","","","","","","","","","","","","","","Concatenate a value and vector","R like cbind - concatenate two matrix by column direction","","","Numpy like column_stack","Concatenate two vectors into one","MATLAB like eye - Identity matrix","eye with custom shape","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","MATLAB like linspace","linspace with precision","Numpy like logspace","Rand matrix","Rand matrix with specific rng","R like rbind - concatenate two matrix by row direction","Numpy like row_stack","R like seq function","Seq with Precision","","","","","","","MATLAB like zeros (Matrix)","Zeros with custom shape","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Plot Style (<code>scienceplots</code> should be installed)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Format float number into lower exponent notation with ‘+…","","Format float number into upper exponent notation with ‘+…","","","","Auto-zip","","","","Vector compare","Find the index of interval of x","Generate Range of Intervals","","","Near equal","","Signum function","","Generate and Zip Range of Intervals","","Extract no-duplicate sample from Vector","","","","","","","","","","","","Simple Matrix Writer","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,13,8,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,5,5,3,3,0,0,0,3,3,3,3,3,3,5,5,5,5,3,3,5,5,5,8,5,5,5,5,8,8,8,8,13,13,13,3,3,3,13,3,3,5,5,5,5,5,0,0,0,0,0,17,0,0,0,36,0,0,0,0,0,17,21,17,21,21,17,17,21,17,17,19,33,36,36,36,19,19,19,19,43,33,33,17,0,43,19,43,19,36,17,0,19,33,0,0,17,0,0,0,36,0,0,0,0,0,48,49,47,49,47,48,49,47,48,49,47,17,21,17,21,21,17,17,21,17,17,48,49,47,48,49,47,47,48,49,48,48,49,49,19,33,48,49,47,48,49,47,48,49,47,36,36,48,49,36,48,49,19,19,19,19,48,49,47,43,33,48,49,47,33,48,49,47,17,0,33,43,19,43,19,36,17,0,48,49,47,19,33,48,49,47,48,49,47,48,49,47,48,49,47,48,49,47,0,0,0,0,0,0,0,0,0,0,0,0,0,52,0,52,53,55,52,53,55,52,53,55,52,53,52,53,55,0,53,53,53,55,52,53,55,52,53,55,52,53,55,55,0,55,55,55,52,53,52,53,55,52,53,55,52,53,55,55,52,53,55,57,57,57,57,57,57,57,57,57,57,57,57,57,0,57,57,57,57,57,57,57,57,57,57,57,0,0,57,57,57,57,0,57,57,0,0,57,57,57,57,57,0,0,73,73,0,73,0,0,73,60,0,69,0,0,0,0,0,0,0,0,0,0,0,60,0,60,61,62,63,64,65,66,67,68,69,70,74,60,61,62,63,64,65,66,67,68,69,70,74,60,61,62,63,64,65,66,67,68,69,70,60,61,62,63,64,65,66,67,68,69,70,60,61,62,63,64,65,66,67,68,69,70,61,62,63,64,65,66,67,68,70,61,62,63,64,65,66,67,68,69,70,60,60,61,62,63,64,65,66,67,68,69,70,74,60,61,62,63,64,65,66,67,68,69,70,72,74,60,61,62,63,64,65,66,67,68,69,70,73,65,66,67,68,73,65,66,67,68,73,65,66,67,68,74,65,66,67,68,70,72,73,65,66,67,68,61,62,63,64,65,66,67,68,69,70,78,74,75,61,62,63,64,65,66,67,68,70,60,61,62,63,64,65,66,67,68,69,70,60,73,65,66,67,68,74,60,61,62,63,64,65,66,67,68,69,70,74,60,61,62,63,64,65,66,67,68,69,70,74,60,61,62,63,64,65,66,67,68,69,70,74,60,61,62,63,64,65,66,67,68,69,70,0,81,0,81,82,0,81,82,0,0,0,81,82,83,81,82,83,81,82,81,82,81,82,82,82,82,81,82,83,81,82,83,83,83,82,83,81,82,83,83,82,83,83,83,83,83,83,81,82,83,81,82,83,81,82,83,81,82,83,81,82,0,0,0,0,0,0,0,86,86,0,0,0,0,0,86,86,86,91,93,94,95,96,86,91,93,94,95,96,86,86,86,87,90,91,93,94,95,96,86,86,91,93,94,95,96,86,87,87,87,91,93,94,95,96,86,90,91,93,94,95,96,91,93,94,95,96,86,86,90,91,93,94,95,96,91,93,94,95,96,91,93,94,95,96,86,91,93,94,95,96,86,91,93,94,95,96,86,91,93,94,95,96,86,102,0,0,100,100,100,102,100,0,0,0,99,100,101,102,99,100,101,102,99,100,101,102,99,100,101,102,99,100,101,102,0,0,99,101,99,101,99,101,102,102,102,103,103,103,103,99,99,100,100,101,102,99,99,100,101,101,102,99,101,101,103,99,101,99,101,99,101,99,101,99,99,99,100,101,101,101,102,103,103,99,101,99,100,101,102,100,99,100,101,102,99,100,101,102,99,100,101,102,99,100,101,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,0,0,0,3,3,3,3,3,3,0,0,3,3,0,0,0,0,8,0,0,0,0,0,0,0,0,8,8,8,8,0,0,0,13,13,13,0,0,0,3,3,3,0,13,3,3,0,0,0,105,105,0,105,0,105,0,105,0,105,105,105,107,107,105,105,109,105,0,105,105,105,105,109,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,119,116,117,117,119,117,119,119,117,0,122,0,0,116,0,117,0,0,116,117,119,115,116,117,119,115,116,117,119,113,115,116,117,116,117,119,116,117,119,115,116,117,115,116,117,115,115,116,117,119,119,115,116,117,119,115,115,115,115,116,117,119,115,116,117,115,122,115,116,117,113,115,116,117,116,117,113,113,115,116,117,115,116,117,115,116,117,119,119,115,116,117,119,115,116,117,119,115,116,117,119,115,115,115,116,117,115,116,117,119,115,115,0,0,0,0,0,0,0,0,0,0,0,0,123,124,128,129,123,124,123,124,0,123,124,123,124,123,124,123,124,123,123,124,123,124,123,123,124,123,124,123,124,123,124,123,124,0,123,123,124,0,123,123,124,123,124,0,0,123,123,124,123,123,124,123,124,125,125,125,125,125,125,125,125,125,128,129,125,123,124,125,123,124,125,123,124,123,123,125,123,124,125,123,124,0,128,0,128,123,125,123,124,124,125,123,124,125,123,124,0,128,129,123,123,124,123,0,129,129,128,123,123,125,123,124,124,125,123,124,125,123,124,125,123,124,128,125,123,124,0,0,0,0,0,0,0,0,59,59,59,0,0,0,0,0,59,59,59,59,59,59,59,59,59,131,59,132,133,134,131,59,132,133,134,131,131,131,131,131,131,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,132,133,134,131,59,59,132,133,134,59,59,59,59,131,59,59,131,59,132,133,134,59,59,59,132,133,134,59,59,59,59,132,133,59,59,59,59,59,59,59,131,132,133,134,132,133,59,59,59,59,59,59,59,59,59,59,59,132,133,134,59,59,59,59,59,59,136,59,136,59,59,59,131,59,132,133,134,131,59,132,133,134,131,59,132,133,134,131,59,132,133,134,59,59,59,146,149,150,146,149,150,0,0,0,0,146,149,150,146,149,150,146,149,150,146,149,150,146,149,150,146,149,150,146,149,150,0,0,146,149,150,0,0,146,149,150,146,149,150,146,149,150,146,149,150,146,149,150,0,0,0,146,149,150,147,137,148,137,138,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,138,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,147,137,138,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,146,149,150,147,137,148,146,149,150,147,137,148,146,149,150,147,137,148,146,149,150,147,137,148,147,147,137,148,146,149,150,147,137,148,146,146,138,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,146,146,149,149,150,147,147,137,148,148,138,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,146,149,150,147,137,148,147,147,147,147,147,147,147,146,149,150,147,137,148,146,146,137,138,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,138,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,151,138,147,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,150,146,149,147,137,148,138,147,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,152,147,153,147,153,147,154,147,147,147,147,138,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,138,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,147,137,138,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,138,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,146,149,150,147,137,148,148,146,149,147,148,148,137,138,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,146,149,150,147,137,148,146,149,150,147,137,148,146,149,150,147,137,148,151,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,137,146,149,150,147,137,148,152,147,153,147,154,147,147,138,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,0,157,0,0,0,0,158,162,0,163,0,158,0,160,0,156,0,161,0,0,0,0,0,157,0,0,0,161,0,162,163,0,156,160,0,157,54,106,112,158,108,159,160,161,162,163,156,164,165,166,167,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,155,54,54,0,155,54,54,157,54,106,112,158,108,159,160,161,162,163,156,164,165,166,167,157,54,106,112,158,108,159,160,161,162,163,156,164,165,166,167,110,54,54,155,54,54,157,54,106,112,158,108,159,160,161,162,163,156,164,165,166,167,157,54,106,112,158,108,159,160,161,162,163,156,164,165,166,167,54,54,54,54,54,54,54,0,54,54,54,54,112,54,157,54,110,157,54,155,54,54,106,0,54,54,54,54,54,54,54,54,54,54,54,110,110,110,110,110,110,110,110,110,157,54,161,162,163,156,161,161,162,162,163,163,156,156,54,106,164,165,167,54,157,157,54,54,106,112,158,108,159,160,161,162,163,156,164,165,166,167,155,54,54,157,54,106,112,158,108,159,160,161,162,163,156,164,165,166,167,54,54,0,0,0,164,167,164,165,165,164,167,164,0,54,54,54,157,54,54,54,54,106,112,158,108,159,160,161,162,163,156,164,165,166,167,155,54,54,106,0,0,164,110,110,110,155,54,54,54,106,0,0,0,0,0,0,54,54,54,54,155,54,54,0,54,0,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,106,54,54,54,54,110,155,54,54,54,0,108,106,108,155,54,54,108,108,0,54,54,54,54,54,54,54,54,54,54,54,155,54,54,159,166,159,54,157,54,54,54,54,54,54,54,0,155,54,54,155,54,54,110,110,54,54,164,165,166,167,54,54,54,54,54,54,54,54,54,54,155,54,54,54,54,54,54,54,54,165,54,157,54,106,112,158,108,159,160,161,162,163,156,164,165,166,167,157,54,54,54,159,157,54,106,112,158,108,159,160,161,162,163,156,164,165,166,167,157,54,106,112,158,108,159,160,161,162,163,156,164,165,166,167,157,54,106,112,158,108,159,160,161,162,163,156,164,165,166,167,159,106,159,166,167,54,159,159,166,157,54,106,112,158,108,159,160,161,162,163,156,164,165,166,167,112,155,54,54,54,54,54,54,54,112,54,0,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,0,174,0,174,0,51,174,51,51,51,174,51,174,0,51,174,51,174,51,51,175,51,51,51,51,174,174,174,51,51,51,51,174,51,174,51,175,51,175,51,51,174,0,0,51,51,51,51,0,51,51,51,51,51,51,51,51,51,174,51,51,51,174,51,174,51,174,51,174,0,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,177,177,177,0,0,180,178,178,178,180,180,178,180,180,178,178,178,178,180,178,178,180,180,178,178,180,178,0,181,181,181,181,181,181,181,170,0,170,170,170,0,170,170,0,0,0,182,188,0,0,170,182,183,170,170,170,170,184,185,170,170,186,170,186,182,188,188,184,182,170,170,170,170,170,0,0,190,189,190,190,189,189,189,0,176,176,176,0,0,0,0,193,169,169,169,169,191,169,169,169,169,169,193,169,169,169,169,169,194,193,169,169,191,169,169,169,169,169,169,195,0,195,0,0,0,197,198,0,197,198,197,198,199,199,199,199,199,199,197,198,199,199,200,200,0,0,0,0,0,0,0,0,0,0,0,201,202,203,0,0,0,0,204,204,204,204,0,0,204,204,0,0,0,0,204,204,204,204,0,0,0,0,0,0,0,0,0,204,204,204,204,204,204,0,0,211,206,207,207,209,206,205,207,0,206,206,206,209,205,205,211,0,210,210,0,209,0,208,0,208,205,205,206,206,0,0,0,0,0,0,206,206,211,209,207,206,206,206,206,206,206,206,206,206,205,206,207,208,209,210,211,205,206,207,208,209,210,211,212,205,206,207,208,209,210,211,212,205,206,207,208,209,210,211,205,206,207,208,209,210,211,205,206,207,208,209,210,211,205,205,206,206,207,207,208,208,209,209,210,210,211,211,205,206,206,207,207,208,209,210,211,211,212,205,206,207,208,209,210,211,212,213,212,205,206,207,208,209,210,211,213,212,213,212,205,206,207,208,209,210,211,212,212,205,206,207,208,209,210,211,213,212,213,212,213,212,213,212,213,212,213,212,213,212,213,212,213,212,213,212,213,212,213,212,213,212,213,212,213,212,213,212,213,212,213,212,213,212,213,212,213,212,205,206,207,208,209,210,211,206,207,211,205,206,207,208,209,210,211,212,205,206,207,208,209,210,211,212,205,206,207,208,209,210,211,212,205,206,207,208,209,210,211,212,0,0,0,215,216,217,0,0,0,0,0,0,0,0,0,0,0,0,0,0,218,0,218,0,219,0,219,220,0,219,0,0,219,0,0,220,219,220,221,219,220,221,219,220,221,219,220,221,219,220,221,219,219,219,219,220,221,219,220,221,219,221,221,221,219,220,221,221,219,221,221,219,220,221,219,220,221,219,220,221,219,220,221,219,220,221,221],"f":"``````````````````````````````````````````````````````````````````````````````````````````````````{{cb}d{}}{ff}0```0{f{{h{ff}}}}1011{ce{}{}}0{jj}{{ce}d{}{}}44{{jj}l}{{ce}l{}{}}0{{{A`{}{{n{c}}}}}{{A`{}{{n{c}}}}}{}}{{jAb}{{Af{dAd}}}}{cc{}}{{jc}dAh}83{{{A`{}{{n{c}}}}c}{{A`{}{{n{c}}}}}{}}44{{{Aj{}{{n{c}}}}{Aj{}{{n{c}}}}}{{Aj{}{{n{c}}}}}{}}{{{Aj{}{{n{c}}}}c}{{Aj{}{{n{c}}}}}{}}{{{Aj{}{{n{c}}}}Al}{{Aj{}{{n{c}}}}}{}}>=>{{{Aj{}{{n{c}}}}}{{Aj{}{{n{c}}}}}{}}??={c{{Af{e}}}{}{}}0{cAn{}}?```````````````{{{Bb{}{{B`{c}}}}e}{{Bd{c}}}{}{BfBh}}{{Bjc}{{Bd{e}}}{BfBh}{}}{{{Bb{}{{B`{c}}}}eBl}{{Bn{{Bb{}{{B`{c}}}}c}}}{}{BfBh}}{{BjcBl}{{C`{e}}}{BfBh}{}}{{Bjc{Cb{e}}}Bl{BfBh}{}}{{{Bb{}{{B`{c}}}}eBli}{{Af{{Bn{{Bb{}{{B`{c}}}}c}}Cd}}}{}{BfBh}{{Ch{Cf}}}{{Cl{c}{{Cj{g}}}}}}54{{{Bb{}{{B`{c}}}}ek}{{Af{cCd}}}{}{BfBh}{}{{Cn{g}}}{{Cl{c}{{Cj{i}}}}}}0{{Bfc}d{D`Bh}}{{Db{Cb{Dd}}}d}{{}{{Dh{}{{Df{c}}}}}{BhDj{Dl{{Cb{Dd}}}}}}{c{{Af{{Dh{}{{Df{e}}}}Dn}}}Db{BhDj{Dl{{Cb{Dd}}}}}}{c{{Dh{}{{Df{c}}}}}{BhDj{Dl{{Cb{Dd}}}}}}{Bfc{}}{{BfCf}l}{{Bfe}cE`{{Eb{c}}}}{{BfEdEd}l}{{Efg}{{Eh{Efgce}}}{}{}{{Cl{c}{{Cj{e}}}}}}{DbEd}{DbEj}{{{Bb{}{{B`{c}}}}eBl}{{h{{Cb{c}}{Cb{c}}}}}{}{BfBh}}{{}c{}}{{Efc}e{BfBh}{}}{{Bfe}c{}{{Ef{c}}}}{{Efc}{{El{Efce}}}Bf{}}{{Bfe}{{El{eBfc}}}{}{{Ef{c}}}}{Ej{{Dh{}{{Df{c}}}}}{BhDj{Dl{{Cb{Dd}}}}}}{{{Bb{}{{B`{c}}}}e}d{}{BfBh}}{{}En}{{Bfc}{{Af{dDn}}}{D`Bh}}{{Db{Cb{Dd}}}{{Af{dDn}}}}````````````{{cb}d{}}00{cDb{}}0{ce{}{}}00000{{{Bb{}{{B`{c}}}}e}{{Bd{c}}}{}{BfBh}}{{Bjc}{{Bd{e}}}{BfBh}{}}{{{Bb{}{{B`{c}}}}eBl}{{Bn{{Bb{}{{B`{c}}}}c}}}{}{BfBh}}{{BjcBl}{{C`{e}}}{BfBh}{}}{{Bjc{Cb{e}}}Bl{BfBh}{}}{{{Bb{}{{B`{c}}}}eBli}{{Af{{Bn{{Bb{}{{B`{c}}}}c}}Cd}}}{}{BfBh}{{Ch{Cf}}}{{Cl{c}{{Cj{g}}}}}}54{{{Bb{}{{B`{c}}}}ek}{{Af{cCd}}}{}{BfBh}{}{{Cn{g}}}{{Cl{c}{{Cj{i}}}}}}0{F`F`}{FbFb}{EnEn}{{ce}d{}{}}00{{}En}{{F`F`}l}{{FbFb}l}{{ce}l{}{}}000{{Bfc}d{D`Bh}}{{Db{Cb{Dd}}}d}{{F`{Cb{Dd}}}d}{{Fb{Cb{Dd}}}d}{{En{Cb{Dd}}}d}{{F`Ab}{{Af{dAd}}}}{{FbAb}{{Af{dAd}}}}{{EnAb}{{Af{dAd}}}}{cc{}}00{{}{{Dh{}{{Df{c}}}}}{BhDj{Dl{{Cb{Dd}}}}}}{c{{Af{{Dh{}{{Df{e}}}}Dn}}}Db{BhDj{Dl{{Cb{Dd}}}}}}{c{{Af{F`Dn}}}Db}{c{{Af{FbDn}}}Db}{c{{Dh{}{{Df{c}}}}}{BhDj{Dl{{Cb{Dd}}}}}}{{}F`}{{}Fb}{Bfc{}}{{BfCf}l}{{Bfe}cE`{{Eb{c}}}}{{BfEdEd}l}{ce{}{}}00{{Efg}{{Eh{Efgce}}}{}{}{{Cl{c}{{Cj{e}}}}}}{DbEd}{F`Ed}{FbEd}{EnEd}{DbEj}{F`Ej}{FbEj}{EnEj}{{{Bb{}{{B`{c}}}}eBl}{{h{{Cb{c}}{Cb{c}}}}}{}{BfBh}}{{}c{}}{{Db{Cb{Dd}}}{{Af{BlFd}}}}{{Efc}e{BfBh}{}}{{Bfe}c{}{{Ef{c}}}}{{Efc}{{El{Efce}}}Bf{}}{{Bfe}{{El{eBfc}}}{}{{Ef{c}}}}{Ej{{Dh{}{{Df{c}}}}}{BhDj{Dl{{Cb{Dd}}}}}}{{{Bb{}{{B`{c}}}}e}d{}{BfBh}}{{}En}{ce{}{}}00{{Bfc}{{Af{dDn}}}{D`Bh}}{{Db{Cb{Dd}}}{{Af{dDn}}}}{{F`{Cb{Dd}}}{{Af{dDn}}}}{{Fb{Cb{Dd}}}{{Af{dDn}}}}{{En{Cb{Dd}}}{{Af{dDn}}}}{c{{Af{e}}}{}{}}00000{cAn{}}00777`{{{C`{Cf}}{C`{Cf}}}Ff}`````````````{{cb}d{}}0`999999{FhFh}{FjFj}{{ce}d{}{}}0`{{FlFh}Fj}``{Fj{{h{{C`{Cf}}Fl}}}}{FnFj}{{FhAb}G`}{{FjAb}G`}{{FnAb}G`}{cc{}}00{ce{}{}}00{Fnd}{FlFn}``022{c{{Af{e}}}{}{}}00000{cAn{}}00`444```````````````?44{{GbEd}Gb}{{GbCf}Gb}{GbGb}?{{GbGb}l}{{GbAb}G`}:{{c{h{eg}}Gb}Cf{{Cl{Cf}{{Cj{Cf}}}}Gd}{{Ch{Cf}}}{{Ch{Cf}}}}{{cBl{h{CfCf}}}Cf{{Cl{Cf}{{Cj{Cf}}}}}}{Gb{{h{DdDd}}}}{GbEd}{GbBl}{GbCf}{{c{h{CfCf}}Gb}Cf{{Cl{Cf}{{Cj{Cf}}}}Gd}}{ce{}{}}{Gbl}771??>1{{Blcc}{{C`{Cf}}}{{Ch{Cf}}Gd}}{{{C`{Cf}}cCf}{{C`{Cf}}}{{Cl{{C`{Gf}}}{{Cj{{C`{Gf}}}}}}Gd}}```````````````````````{{cb}d{}}0000000000444444444444444444444444{GhGh}{GjGj}{GlGl}{GnGn}{H`H`}{HbHb}{HdHd}{HfHf}{HhHh}{HjHj}{HlHl}{{ce}d{}{}}0000000000{{}Gj}{{}Gl}{{}Gn}{{}H`}{{}Hb}{{}Hd}{{}Hf}{{}Hh}{{}Hl}{c{{Af{Gj}}}Hn}{c{{Af{Gl}}}Hn}{c{{Af{Gn}}}Hn}{c{{Af{H`}}}Hn}{c{{Af{Hb}}}Hn}{c{{Af{Hd}}}Hn}{c{{Af{Hf}}}Hn}{c{{Af{Hh}}}Hn}{c{{Af{Hj}}}Hn}{c{{Af{Hl}}}Hn}{{GhAb}G`}0{{GjAb}G`}{{GlAb}G`}{{GnAb}G`}{{H`Ab}G`}{{HbAb}G`}{{HdAb}G`}{{HfAb}G`}{{HhAb}G`}{{HjAb}G`}{{HlAb}G`}{cc{}}00000000000{I`{{C`{Cf}}}}{ce{}{}}00000000000{IbBl}{HbBl}{HdBl}{HfBl}{HhBl}{IbCf}{HbCf}{HdCf}{HfCf}{HhCf}43210{c{{Id{c}}}If}{{CfCfCfCfBl}Hb}{{CfCfCfCfBl}Hd}{{CfCfCfCfBl}Hf}{{CfCfCfCfBl}Hh}{{HjCfBl}Hl}{{I`Cf{Cb{Cf}}{Cb{Cf}}}{{Ih{d}}}};:987{{Gjc}AfIj}{{Glc}AfIj}{{Gnc}AfIj}{{H`c}AfIj}{{Hbc}AfIj}{{Hdc}AfIj}{{Hfc}AfIj}{{Hhc}AfIj}{{Hjc}AfIj}{{Hlc}AfIj}{{Ilc{h{CfCf}}Cf}{{Ih{{h{{C`{Cf}}{C`{{C`{Cf}}}}}}}}}I`}{{{Id{c}}e{h{CfCf}}Cf}{{Ih{{h{{C`{Cf}}{C`{{C`{Cf}}}}}}}}}IfI`}{{IfcCf{Cb{Cf}}Cf}{{Ih{Cf}}}I`}{{ceCf{Cb{Cf}}Cf}{{Af{CfIn}}}{}I`}0000000{{HlcCf{Cb{Cf}}Cf}{{Ih{Cf}}}I`}{ce{}{}}0000000000{cJ`{}}{IbCf}{HbCf}{HdCf}{HfCf}{HhCf}{c{{Af{e}}}{}{}}00000000000000000000000{cAn{}}00000000000888888888888```````````{{cb}d{}}0999999{JbJb}{JdJd}{{ce}d{}{}}0{{JdJd}l}{{ce}l{}{}}0{{JbAb}G`}{{JdAb}G`}{cc{}}00{{{Jf{c}}}{{C`{Cf}}}{{Cl{{C`{Cf}}{C`{Gf}}}{{Cj{{Bd{{C`{Gf}}}}}}}}}}{{{Jf{c}}}Cf{{Cl{{C`{Cf}}{C`{Gf}}}{{Cj{{Bd{{C`{Gf}}}}}}}}}}{{{Jf{c}}Jh}{{Bd{Cf}}}{{Cl{{C`{Cf}}{C`{Gf}}}{{Cj{{Bd{{C`{Gf}}}}}}}}}}{{Jdc}dAh}{ce{}{}}00{{Flc}{{Jf{c}}}{{Cl{{C`{Cf}}{C`{Gf}}}{{Cj{{Bd{{C`{Gf}}}}}}}}}}5{{JdJd}{{Bd{Jj}}}}{{{Jf{c}}{C`{Cf}}}{{Jf{c}}}{{Cl{{C`{Cf}}{C`{Gf}}}{{Cj{{Bd{{C`{Gf}}}}}}}}}}{{{Jf{c}}Cf}{{Jf{c}}}{{Cl{{C`{Cf}}{C`{Gf}}}{{Cj{{Bd{{C`{Gf}}}}}}}}}}00{{{Jf{c}}Bl}{{Jf{c}}}{{Cl{{C`{Cf}}{C`{Gf}}}{{Cj{{Bd{{C`{Gf}}}}}}}}}}{{{Jf{c}}Jb}{{Jf{c}}}{{Cl{{C`{Cf}}{C`{Gf}}}{{Cj{{Bd{{C`{Gf}}}}}}}}}}66{c{{Af{e}}}{}{}}00000{cAn{}}00888````````````````{{cb}d{}}999999999999{JlJl}{{ce}d{}{}}{{JnK`}{{Ih{Kb}}}}{{Kde}{{Ih{K`}}}{}{{Jn{c}}}}{{Kfc}{{Ih{{Kh{Cf}}}}}{{Jn{{h{CfCf}}}}}}{{Kjc}{{Ih{{Kh{Cf}}}}}{{Jn{Cf}}}}{{Klc}{{Ih{{Kh{Cf}}}}}{{Jn{{h{CfCf}}}}}}{{Knc}{{Ih{{Kh{Cf}}}}}{{Jn{{h{CfCf}}}}}}{{L`c}{{Ih{K`}}}{{Jn{Lb}}}}{{JlAb}G`}0{cc{}}00000{{JnK`}{{Ih{K`}}}}{{JnK`}{{Ih{Ld}}}}{Jnc{}}{ce{}{}}00000{KdBl}{KfBl}{KjBl}{KlBl}{KnBl}{L`Bl}`````6{cJ`{}}{KdCf}{KfCf}{KjCf}{KlCf}{KnCf}{L`Cf}`````{c{{Af{e}}}{}{}}00000000000{cAn{}}00000??????```````````{{cb}d{}}000{ce{}{}}0000000{LfLf}{LhLh}{LjLj}{LlLl}{{ce}d{}{}}000{{{Cb{Cf}}{Cb{Cf}}Ll}{{Ih{Lj}}}}{{{Cb{Cf}}{Cb{Cf}}}{{Ih{Lf}}}}{{}Lf}{{}Lj}86{c{{Af{Lf}}}Hn}{c{{Af{Lj}}}Hn}{{LlLl}l}{{ce}l{}{}}0{{Lnc}Cf{{Ch{Cf}}Gd}}{{Ln{Cb{c}}}{{C`{Cf}}}{{Ch{Cf}}Gd}}{{Ln{Cb{Cf}}c}{{C`{Cf}}}{{Cl{Cf}{{Cj{Cf}}}}Gd}}{{LnCfc}Cf{{Cl{Cf}{{Cj{Cf}}}}}}{{Lf{C`{Cf}}{C`{Cf}}}{{Ih{d}}}}{{LfAb}G`}{{LhAb}G`}0{{LjAb}G`}{{LlAb}G`}{{{C`{{h{{M`{Cf}}Ff}}}}}Lf}{cc{}}00{{{C`{{h{{M`{Cf}}Ff}}}}}Lj}1{{{Cb{Cf}}{Cb{Cf}}}{{Ih{Lf}}}}{{{Cb{Cf}}{Cb{Cf}}Ll}{{Ih{Lj}}}}{{{Cb{Cf}}{Cb{Cf}}{Cb{Cf}}}{{Ih{Lj}}}}{Ln{{C`{{h{{M`{Cf}}Ff}}}}}}{Lf{{C`{{h{{M`{Cf}}Ff}}}}}}{Lj{{C`{{h{{M`{Cf}}Ff}}}}}}{{LfBl}c{}}{{LjBl}c{}}{LfLf}{LjLj}{{Lf{h{cc}}}Cf{{Ch{Cf}}Gd}}{{Lj{h{cc}}}Cf{{Ch{Cf}}Gd}}{ce{}{}}8{Lf{{C`{Ff}}}}118{Lj{{C`{Ff}}}}2{LnBl}{{Lnc}Ff{{Ch{Cf}}Gd}}{{Lfc}AfIj}{{Ljc}AfIj}6666{cJ`{}}{c{{Af{e}}}{}{}}0000000{cAn{}}0009999{{c{C`{Cf}}}Fl{{Cl{{C`{Gf}}}{{Cj{{C`{Gf}}}}}}}}{{{C`{Cf}}{C`{Cf}}{C`{Cf}}{C`{Cf}}}Fl}``````````````````````````````````````````````````{ff}0```0{f{{h{ff}}}}1011``11````{{{A`{}{{n{c}}}}}{{A`{}{{n{c}}}}}{}}````````0{{{A`{}{{n{c}}}}c}{{A`{}{{n{c}}}}}{}}11```{{{Aj{}{{n{c}}}}{Aj{}{{n{c}}}}}{{Aj{}{{n{c}}}}}{}}{{{Aj{}{{n{c}}}}c}{{Aj{}{{n{c}}}}}{}}{{{Aj{}{{n{c}}}}Al}{{Aj{}{{n{c}}}}}{}}```656`{{{Aj{}{{n{c}}}}}{{Aj{}{{n{c}}}}}{}}77```{{Mb{C`{Cf}}}{{C`{Cf}}}}{Mb{{h{FlFlFlFl}}}}{BlFf}{MbFl}{{{Cb{Cf}}{Cb{Cf}}}{{Ih{Lj}}}}{MbCf}{FlFj}6{{c{h{CfCf}}}Cf{{Cl{Cf}{{Cj{Cf}}}}Gd}}4{Mbl}{MbMd}{Mfc{}}{MfMf}8{MbMh}{Jh{{Af{Mj{Mn{Ml}}}}}}:{{FlFl}Fl}>{{MbFl}Fl}{Mb{{Bd{N`}}}}0{{MjJh}{{Af{d{Mn{Ml}}}}}}``{{CfCf}Cf}{CfCf}00{{CfCfCf}Cf}02112011{{CfBl}Cf}22{{CfBl}{{C`{Cf}}}}``````````````````````{{cb}d{}}00{ce{}{}}0000000{{Nbc}Cf{NdE`Gd{Ch{Cf}}}}{{{Nf{Cf}}c}Cf{NdE`Gd{Ch{Cf}}}}{{{Nh{c}}e}Cf{NdE`Gd{Ch{Cf}}}{NdE`Gd{Ch{Cf}}}}{{{Nj{c}}e}Cf{NdE`Gd{Ch{Cf}}}{NdE`Gd{Ch{Cf}}}}{{{Nh{c}}}{{Nh{c}}}{NlNdE`Gd{Ch{Cf}}}}{{{Nj{c}}}{{Nj{c}}}{NlNdE`Gd{Ch{Cf}}}}{NnNn}{{ce}d{}{}}00{{{Nf{Cf}}}c{}}{{{Nh{c}}}e{NdE`Gd{Ch{Cf}}}{}}{{{Nj{c}}}e{NdE`Gd{Ch{Cf}}}{}}210{{{Nf{Cf}}Bl}{{C`{Cf}}}}{{{Nf{Cf}}Cf}{{C`{Cf}}}}{{{Nh{c}}Ab}G`{O`NdE`Gd{Ch{Cf}}}}{{{Nj{c}}Ab}G`{O`NdE`Gd{Ch{Cf}}}}{{NnAb}G`}0{cc{}}000{{c{h{CfCf}}BlCf}{{Ih{{Nf{Cf}}}}}{{Cl{Cf}{{Cj{Cf}}}}Gd}}{{{Nf{Cf}}Cf}{{h{CfCf}}}}{{{Nf{Cf}}}{{C`{{h{CfCf}}}}}}{ce{}{}}000<;:{{{C`{Cf}}{C`{Cf}}}{{Ih{{Nf{Cf}}}}}}{{{Od{}{{Ob{c}}}}}c{}}{{{Nf{c}}}e{NdE`Gd{Ch{Cf}}}{}}>={{Nbc}Cf{NdE`Gd{Ch{Cf}}}}{{{Nf{Cf}}c}Cf{NdE`Gd{Ch{Cf}}}}{{{Nh{c}}e}Cf{NdE`Gd{Ch{Cf}}}{NdE`Gd{Ch{Cf}}}}{{{Nj{c}}e}Cf{NdE`Gd{Ch{Cf}}}{NdE`Gd{Ch{Cf}}}}{{{Nh{c}}}d{O`NdE`Gd{Ch{Cf}}}}{{{Nj{c}}}d{O`NdE`Gd{Ch{Cf}}}}{{NbBl}{{C`{Cf}}}}{{NbcBl}{{C`{Cf}}}{BfNl}}{{{Nf{Cf}}cBl}{{C`{Cf}}}{BfNl}}{{{Nh{c}}eBl}{{C`{Cf}}}{NdE`Gd{Ch{Cf}}}{BfNl}}{{{Nj{c}}eBl}{{C`{Cf}}}{NdE`Gd{Ch{Cf}}}{BfNl}}{{{Nf{Cf}}}c{}}{{{Nh{c}}}e{NdE`Gd{Ch{Cf}}}{}}{{{Nj{c}}}e{NdE`Gd{Ch{Cf}}}{}}{{{Nf{Cf}}}Cf}{ce{}{}}00{cJ`{}}{c{{Af{e}}}{}{}}0000000{cAn{}}000{{{Nf{Cf}}{C`{Cf}}}d}08764444{{{Nf{Cf}}Cf}Cf}{{{Nf{Cf}}}{{C`{Cf}}}}{{BlBl}Bl}00{BlBl}0{{EnCfCf}Cf}{{cBl{h{CfCf}}BlCf}{{Ih{{C`{Cf}}}}}{{Cl{Cf}{{Cj{Cf}}}}Gd}}{{cBl{h{CfCf}}BlCfe}{{Ih{{C`{Cf}}}}}{{Cl{Cf}{{Cj{Cf}}}}Gd}{BfNl}}{{Encc}c{NdE`Gd}}{EjF`}{EjFb}{{EnCf}Cf}{OfCf}```0`0``0`0`0`0``0`0``0`0`0`0`0``{OfBl}1``01`1````1``1`1````````````{{cb}d{}}00{ce{}{}}00000{{OfOh}Cf}{{Of{Cb{Oh}}}{{C`{Cf}}}}{OjOj}{OfOf}{OhOh}{{ce}d{}{}}00{{{C`{Cf}}{C`{Cf}}}Cf}{{{A`{}{{Ol{c}}{On{e}}}}}c{}{}}10{{OfOf}l}{{OjAb}G`}{{OfAb}G`}{{OhAb}G`}0{cc{}}00==={{FlFl}Fl}{{{A`{}{{Ol{c}}{On{e}}}}}e{}{}}{{{Ab{}{{Ol{c}}{On{e}}}}}e{}{}}{{{C`{c}}{C`{c}}c}Of{AdNlGd}}{OfCf}`{Ofd}{{{C`{Cf}}Oj}{{C`{Cf}}}}{{{Ab{}{{Ol{c}}{On{e}}}}CfOj}e{}{}}{{{Ab{}{{Ol{c}}{On{e}}}}{C`{Cf}}Oj}c{}{}}7{{Of{Cb{Oh}}}d}{OfFl}{ce{}{}}00{cJ`{}}{c{{Af{e}}}{}{}}00000{cAn{}}00=333````````````````{{cb}d{}}{GfGf}0{{GfGf}c{}}{{GfCf}c{}}22227777777777{{{Af{c}}Gf}e{{Cl{Gf}{{Cj{Gf}}}}}{}}{{{Af{c}}{C`{Gf}}}e{{Cl{{C`{Gf}}}{{Cj{{C`{Gf}}}}}}}{}}{{{Af{c}}{C`{Cf}}}e{{Cl{{C`{Gf}}}{{Cj{{C`{Gf}}}}}}}{}}{{{Af{c}}Cf}e{{Cl{Gf}{{Cj{Gf}}}}}{}}216{{ce}d{}{}}7{GfCf}{Gf{{Bd{Cf}}}}0781009{{GfGf}l}:{{GfAb}G`}0{{AhAb}G`}{{AjAb}G`}{{AlAb}G`}{cc{}}{CfGf}11110{cGf{{An{}{{B`{Cf}}}}}}0{BlGf}{{{Af{c}}}{{Af{c}}}Nl}{{GfBl}c{}}0{ce{}{}}0000{Gfc{}}00111{Gfl}{GfAj}{GfAl}{GfBl}{AhBl}{AjBl}{GfGf}{{GfCf}Gf}11{{GfCf}c{}}{{GfGf}c{}}:{c{{Af{c}}}Nl}{Ah{{Bd{c}}}{}}{Aj{{Bd{c}}}{}}{Al{{Bd{c}}}{}}21:{{GfGf}{{Bd{Jj}}}}{{GfGf}Gf}8{{GfAl}Gf}{Gfd}{{GfCf}d}00{Gf{{h{GfGf}}}}={Ah{{h{Bl{Bd{Bl}}}}}}{Aj{{h{Bl{Bd{Bl}}}}}}{Al{{h{Bl{Bd{Bl}}}}}}{GfGf}?>000{AA`{{C`{Gf}}}}{GfCf}{AA`{{C`{Cf}}}}{{GfBl}Gf}{ce{}{}}{cJ`{}}{c{{Af{e}}}{}{}}000000000{cAn{}}0000333336{Gf{{Bd{Cf}}}}0````````````````````````````````````````````````````````{{cb}d{}}00000{{AAbAAb}AAb}{AAd{{Cb{c}}}{}}{AAb{{Cb{AAf}}}}{AAb{{Cb{AAh}}}}{AAb{{Cb{Dd}}}}{AAb{{Cb{J`}}}}{AAb{{Cb{Cf}}}}{AAb{{Cb{AAj}}}}{AAb{{Cb{Bl}}}}{AAb{{Cb{AAl}}}}{AAb{{Cb{Ej}}}}{AAb{{Cb{l}}}}{AAb{{Cb{Ed}}}}{AAb{{Cb{AAn}}}}{AAb{{Cb{AB`}}}}{AAb{{Cb{ABb}}}}{AAb{{Cb{Al}}}}?1;734<56=0>:892{{AAbABd}d}{{ABf{C`{ABd}}}d}{{AAbBl}ABh}{{AAdBl}c{}}{{AAbBl}Dd}{{AAbBl}Cf}{{AAbBl}AAj}{{AAbBl}J`}{{AAbBl}AAh}{{AAbBl}l}{{AAbBl}Ed}{{AAbBl}AB`}{{AAbBl}Al}{{AAbBl}AAf}{{AAbBl}ABb}{{AAbBl}Ej}{{AAbBl}AAl}{{AAbBl}AAn}{{AAbBl}Bl}{ce{}{}}00000000000{ABdABd}{ABjABj}{ABlABl}{ABfABf}{AAbAAb}{ABhABh}{{ce}d{}{}}00000`{{ABfJh}d}``{{ABdABd}l}{{ABjABj}l}{{ABlABl}l}{{ABfABf}l}{{AAbAAb}l}{{ABhABh}l}{{ce}l{}{}}0{{AAde}AAd{}{{Cl{c}{{Cj{l}}}}}}{{AAbc}AAb{{Cl{AAf}{{Cj{l}}}}}}{{AAbc}AAb{{Cl{AAh}{{Cj{l}}}}}}{{AAbc}AAb{{Cl{AAj}{{Cj{l}}}}}}{{AAbc}AAb{{Cl{J`}{{Cj{l}}}}}}{{AAbc}AAb{{Cl{ABb}{{Cj{l}}}}}}{{AAbc}AAb{{Cl{Ej}{{Cj{l}}}}}}{{AAbc}AAb{{Cl{Ed}{{Cj{l}}}}}}{{AAbc}AAb{{Cl{Cf}{{Cj{l}}}}}}{{AAbc}AAb{{Cl{Dd}{{Cj{l}}}}}}{{AAbc}AAb{{Cl{AAl}{{Cj{l}}}}}}{{AAbc}AAb{{Cl{l}{{Cj{l}}}}}}{{AAbc}AAb{{Cl{Bl}{{Cj{l}}}}}}{{AAbc}AAb{{Cl{AB`}{{Cj{l}}}}}}{{AAbc}AAb{{Cl{Al}{{Cj{l}}}}}}{{AAbc}AAb{{Cl{AAn}{{Cj{l}}}}}}{{ABdAb}G`}0{{ABjAb}G`}0{{ABlAb}G`}{{ABfAb}G`}0{{AAbAb}G`}{{ABhAb}G`}0{{AAdce}c{}{{Cl{cc}{{Cj{c}}}}}}{{AAbDdc}Dd{{Cl{DdDd}{{Cj{Dd}}}}}}{{AAbABbc}ABb{{Cl{ABbABb}{{Cj{ABb}}}}}}{{AAbJ`c}J`{{Cl{J`J`}{{Cj{J`}}}}}}{{AAblc}l{{Cl{ll}{{Cj{l}}}}}}{{AAbAAjc}AAj{{Cl{AAjAAj}{{Cj{AAj}}}}}}{{AAbEdc}Ed{{Cl{EdEd}{{Cj{Ed}}}}}}{{AAbAlc}Al{{Cl{AlAl}{{Cj{Al}}}}}}{{AAbAB`c}AB`{{Cl{AB`AB`}{{Cj{AB`}}}}}}{{AAbAAfc}AAf{{Cl{AAfAAf}{{Cj{AAf}}}}}}{{AAbBlc}Bl{{Cl{BlBl}{{Cj{Bl}}}}}}{{AAbCfc}Cf{{Cl{CfCf}{{Cj{Cf}}}}}}{{AAbAAnc}AAn{{Cl{AAnAAn}{{Cj{AAn}}}}}}{{AAbAAhc}AAh{{Cl{AAhAAh}{{Cj{AAh}}}}}}{{AAbAAlc}AAl{{Cl{AAlAAl}{{Cj{AAl}}}}}}{{AAbEjc}Ej{{Cl{EjEj}{{Cj{Ej}}}}}}{cc{}}00000{ABf{{C`{J`}}}}0`{{ABfJh}c{}}{{ABfBl}c{}}01{ce{}{}}00000{ABdl}0{AAbBl}{{AAde}AAd{}{{Cl{c}{{Cj{c}}}}}}{{AAbc}AAb{{Cl{Dd}{{Cj{Dd}}}}}}{{AAbc}AAb{{Cl{J`}{{Cj{J`}}}}}}{{AAbc}AAb{{Cl{AAj}{{Cj{AAj}}}}}}{{AAbc}AAb{{Cl{Ej}{{Cj{Ej}}}}}}{{AAbc}AAb{{Cl{AAf}{{Cj{AAf}}}}}}{{AAbc}AAb{{Cl{AAh}{{Cj{AAh}}}}}}{{AAbc}AAb{{Cl{AB`}{{Cj{AB`}}}}}}{{AAbc}AAb{{Cl{Cf}{{Cj{Cf}}}}}}{{AAbc}AAb{{Cl{ABb}{{Cj{ABb}}}}}}{{AAbc}AAb{{Cl{l}{{Cj{l}}}}}}{{AAbc}AAb{{Cl{Al}{{Cj{Al}}}}}}{{AAbc}AAb{{Cl{AAl}{{Cj{AAl}}}}}}{{AAbc}AAb{{Cl{Ed}{{Cj{Ed}}}}}}{{AAbc}AAb{{Cl{AAn}{{Cj{AAn}}}}}}{{AAbc}AAb{{Cl{Bl}{{Cj{Bl}}}}}}{{AAbc}AAb{}}{{AAde}d{}{{Cl{c}}}}{{AAbc}d{{Cl{AB`}}}}{{AAbc}d{{Cl{Al}}}}{{AAbc}d{{Cl{AAj}}}}{{AAbc}d{{Cl{Ed}}}}{{AAbc}d{{Cl{AAf}}}}{{AAbc}d{{Cl{ABb}}}}{{AAbc}d{{Cl{AAh}}}}{{AAbc}d{{Cl{Cf}}}}{{AAbc}d{{Cl{l}}}}{{AAbc}d{{Cl{Bl}}}}{{AAbc}d{{Cl{AAl}}}}{{AAbc}d{{Cl{Ej}}}}{{AAbc}d{{Cl{Dd}}}}{{AAbc}d{{Cl{AAn}}}}{{AAbc}d{{Cl{J`}}}}{cABn{}}{{{C`{c}}}AAd{}}{{{C`{AAb}}}ABf}{{{C`{l}}}AAb}{{{C`{Cf}}}AAb}{{{C`{AAh}}}AAb}{{{C`{AB`}}}AAb}{{{C`{Bl}}}AAb}{{{C`{AAn}}}AAb}{{{C`{ABb}}}AAb}{{{C`{Dd}}}AAb}{{{C`{AAj}}}AAb}{{{C`{Ed}}}AAb}{{{C`{AAf}}}AAb}{{{C`{J`}}}AAb}{{{C`{AAl}}}AAb}{{{C`{Al}}}AAb}{{{C`{Ej}}}AAb}{DdABh}{AAhABh}{AAjABh}{AAfABh}{EjABh}{J`ABh}{ABbABh}{CfABh}{EdABh}{AAlABh}{lABh}{BlABh}{AB`ABh}{AlABh}{AAnABh}{{ABlABl}{{Bd{Jj}}}}{ABdd}{ABjd}{ABfd}{AAbd}{ABhd}{{AAdc}d{}}{{ABfJhAAb}d}{{AAbl}d}{{AAbABb}d}{{AAbEd}d}{{AAbAAh}d}{{AAbAAl}d}{{AAbAB`}d}{{AAbBl}d}{{AAbAAf}d}{{AAbAAn}d}{{AAbCf}d}{{AAbAl}d}{{AAbEj}d}{{AAbDd}d}{{AAbJ`}d}{{AAbAAj}d}{{JhAB`}{{Af{AC`{Mn{Ml}}}}}}{{JhAB`}{{Af{ABf{Mn{Ml}}}}}}{Jh{{Af{ACb{Mn{Ml}}}}}}{Jh{{Af{ABf{Mn{Ml}}}}}}{{Jh{C`{Jh}}}{{Af{ACb{Mn{Ml}}}}}}{{Jh{C`{Jh}}}{{Af{ABf{Mn{Ml}}}}}}{Jh{{Af{ACd{Mn{Ml}}}}}}33{{ABfBl}ABf}{{ABf{C`{Jh}}}d}{{AAdBl}AAd}{{AAbBl}AAb}00000000000000{{AAde}AAd{}{{Cl{c}{{Cj{l}}}}}}{{AAbc}AAb{{Cl{J`}{{Cj{l}}}}}}{{AAbc}AAb{{Cl{l}{{Cj{l}}}}}}{{AAbc}AAb{{Cl{AB`}{{Cj{l}}}}}}{{AAbc}AAb{{Cl{Cf}{{Cj{l}}}}}}{{AAbc}AAb{{Cl{AAn}{{Cj{l}}}}}}{{AAbc}AAb{{Cl{AAh}{{Cj{l}}}}}}{{AAbc}AAb{{Cl{Ej}{{Cj{l}}}}}}{{AAbc}AAb{{Cl{Dd}{{Cj{l}}}}}}{{AAbc}AAb{{Cl{Ed}{{Cj{l}}}}}}{{AAbc}AAb{{Cl{AAl}{{Cj{l}}}}}}{{AAbc}AAb{{Cl{AAj}{{Cj{l}}}}}}{{AAbc}AAb{{Cl{AAf}{{Cj{l}}}}}}{{AAbc}AAb{{Cl{ABb}{{Cj{l}}}}}}{{AAbc}AAb{{Cl{Bl}{{Cj{l}}}}}}{{AAbc}AAb{{Cl{Al}{{Cj{l}}}}}}{ABfJ`}{{AAbAAb}AAb}{{AAdBl}AAd}{{AAbBl}AAb}00000000000000{{AAde}AAd{}{{Cl{c}{{Cj{l}}}}}}=<>{{AAbc}AAb{{Cl{J`}{{Cj{l}}}}}}:9{{AAbc}AAb{{Cl{l}{{Cj{l}}}}}}{{AAbc}AAb{{Cl{AB`}{{Cj{l}}}}}}8=9>:{{AAbc}AAb{{Cl{AAn}{{Cj{l}}}}}}{{AAbc}AAb{{Cl{Cf}{{Cj{l}}}}}}{ce{}{}}00000{ABhAAb}{cJ`{}}000{ABhJ`}{{AAbABd}AAb}{AAd{{C`{c}}}{}}{AAb{{C`{AAj}}}}{AAb{{C`{Bl}}}}{AAb{{C`{AB`}}}}{AAb{{C`{ABb}}}}{AAb{{C`{l}}}}{AAb{{C`{AAn}}}}{AAb{{C`{AAh}}}}{AAb{{C`{AAl}}}}{AAb{{C`{Cf}}}}{AAb{{C`{Al}}}}{AAb{{C`{Ed}}}}{AAb{{C`{J`}}}}{AAb{{C`{Dd}}}}{AAb{{C`{AAf}}}}{AAb{{C`{Ej}}}}{c{{Af{e}}}{}{}}00000000000{cAn{}}00000{ABnc{}}{ABhAAh}{ABhAAl}{ABhAAj}{ABhDd}{ABhCf}{ABhAAn}{ABhl}{ABhEj}{ABhBl}{ABhJ`}{ABhAAf}{ABhAB`}{ABhABb}{ABhAl}{ABhEd}``{ce{}{}}00000{{AC`Jh}{{Af{d{Mn{Ml}}}}}}{{ABfJh}{{Af{d{Mn{Ml}}}}}}{{ACbJh}{{Af{d{Mn{Ml}}}}}}1{{ACdJhj}{{Af{d{Mn{Ml}}}}}}2{{ABfJhj}{{Af{d{Mn{Ml}}}}}}{{AAdeAAd}AAd{}{{Cl{cc}{{Cj{c}}}}}}{{AAbcAAb}AAb{{Cl{ABbABb}{{Cj{ABb}}}}}}{{AAbcAAb}AAb{{Cl{EdEd}{{Cj{Ed}}}}}}{{AAbcAAb}AAb{{Cl{ll}{{Cj{l}}}}}}{{AAbcAAb}AAb{{Cl{AAhAAh}{{Cj{AAh}}}}}}{{AAbcAAb}AAb{{Cl{BlBl}{{Cj{Bl}}}}}}{{AAbcAAb}AAb{{Cl{AAnAAn}{{Cj{AAn}}}}}}{{AAbcAAb}AAb{{Cl{CfCf}{{Cj{Cf}}}}}}{{AAbcAAb}AAb{{Cl{AAjAAj}{{Cj{AAj}}}}}}{{AAbcAAb}AAb{{Cl{EjEj}{{Cj{Ej}}}}}}{{AAbcAAb}AAb{{Cl{AlAl}{{Cj{Al}}}}}}{{AAbcAAb}AAb{{Cl{AB`AB`}{{Cj{AB`}}}}}}{{AAbcAAb}AAb{{Cl{J`J`}{{Cj{J`}}}}}}{{AAbcAAb}AAb{{Cl{AAfAAf}{{Cj{AAf}}}}}}{{AAbcAAb}AAb{{Cl{AAlAAl}{{Cj{AAl}}}}}}{{AAbcAAb}AAb{{Cl{DdDd}{{Cj{Dd}}}}}}```````````````````````````````````{{cb}d{}}000000000000000{FlFl}0{{FlFl}c{}}{{Flc}Fl{{Ch{Cf}}Gd}}{{FlFl}Fl}{{Flc}e{{Ch{Cf}}Gd}{}}{{Flc}Fl{}}{{Flc}d{}}103{{Fl{C`{Cf}}}{{C`{Cf}}}}{Fl{{Cb{Cf}}}}08888{{ACf{C`{Cf}}}{{C`{Cf}}}}226{ACf{{h{FlFlFlFl}}}}{Fl{{h{FlFlFlFl}}}}0{ce{}{}}0000000000000000000000000000000{Ml{{Bd{Ml}}}}={Fld}{{ACfACh}Fl}?{{FlACh}Fl}{ACjACj}{FlFl}{MdMd}{N`N`}{AClACl}{MhMh}{ACnACn}{AD`AD`}{ADbADb}{ADdADd}{ADfADf}{AChACh}{ADhADh}{ADjADj}{ADlADl}{ADnADn}{{ce}d{}{}}000000000000000{{FlBl}{{C`{Cf}}}}`{{Flc}Fl{{Cl{{C`{Cf}}}{{Cj{{C`{Cf}}}}}}}}1{{Flc}d{{Cl{{C`{Cf}}}{{Cj{{C`{Cf}}}}}}}}2{{Flc}{{C`{Cf}}}{{Cl{{C`{Cf}}}{{Cj{Cf}}}}}}{{FlFlFlFl}Fl}{FlFl}000``{{}ACj}{{}Fl}{MlJh}{c{{Af{ACj}}}Hn}{c{{Af{Fl}}}Hn}{ACfCf}{FlCf}0{MdCf}{BlFl}{Fl{{C`{Cf}}}}{{FlBl}c{}}{{FlAl}Fl}{{FlAAj}Fl}{{FlFl}Fl}{{FlAl}c{}}{{FlBl}Fl}{{FlCf}c{}}{{FlCf}Fl}{{FlAAj}c{}}{{FlFl}Cf}{{{Mn{Ml}}}{{Af{{Mn{c}}{Mn{Ml}}}}}Ml}00{Ml{{Bd{c}}}Ml}00000{{ACjACj}l}{{FlFl}l}{{ADbADb}l}{{ADdADd}l}{{ADfADf}l}{{AChACh}l}{{ce}l{}{}}0000000{FlFl}{Md{{h{{C`{Bl}}{C`{Bl}}FlFl}}}}```{{Flc}Fl{{Cl{Cf}{{Cj{Cf}}}}}}{{ACjAb}G`}0{{FlAb}G`}0{{MdAb}G`}{{N`Ab}G`}{{AClAb}G`}{{MhAb}G`}{{ACnAb}G`}{{AD`Ab}G`}{{ADbAb}G`}{{ADdAb}G`}{{ADfAb}G`}{{AChAb}G`}{{ADhAb}G`}{{ADjAb}G`}{{ADlAb}G`}{{ADnAb}G`}{{ACf{C`{Cf}}}{{C`{Cf}}}}{{Fl{C`{Cf}}}{{C`{Cf}}}}0{cc{}}000000000000000{{e{h{BlBl}}}Fl{{Ch{Cf}}}{{Cl{BlBl}{{Cj{c}}}}Gd}}{{AAbBlBlACj}Fl}{{CfFlFlCfFl}d}{{CfFl{C`{Cf}}Cf{C`{Cf}}}d}{{{C`{Cf}}}Fl}{ADhFl}{ADn{{Bd{Fl}}}}{ADh{{C`{Al}}}}{ADjFl}032{ADh{{Bd{Cf}}}}{{Cf{C`{Cf}}FlCf{C`{Cf}}}d}{{FlFl}Fl}{{Fl{h{BlBl}}}Cf}0{ce{}{}}{Fl{{C`{Cf}}}}{FlAE`}1222222222222222{ACfFl}{FlFl}0{MdFl}11`{Mll}00{ACfl}{Fll}0:`{Fl{{Bd{ADj}}}}{Fl{{Bd{ADl}}}}{Fl{{Bd{ADh}}}}{ADh{{Bd{Fl}}}}{{ADhFl}{{Bd{Fl}}}}{{FlACh}{{Bd{ADn}}}}:{{Flc}Fl{}};;{ACfMd}{FlMd}0{{{C`{c}}BlBlACj}Fl{{Ch{Cf}}}}{Fl{{C`{Cf}}}}{JhFl}{{Fl{AEb{{C`{Cf}}}}}c{}}{{FlBl}Fl}{{Fl{C`{Cf}}}c{}}{{FlFl}Fl}{{FlFl}c{}}24{{FlAAj}Fl}{{FlAl}Fl}{{FlCf}Fl}={FlCf}{Flc{}}{FlFl}{{{C`{{C`{c}}}}}Fl{{Ch{Cf}}Gd}}<>2{{FlAEd}Cf}2{{FlAEd}Fl}`:{{Flc}Fl{}}8{Fld}{{MlAEf}d}{ACfFl}7796{MhFl}``{ACfMh}{FlMh}02`{{{C`{c}}BlBlACj}Fl{{Ch{Cf}}}}{{JhlAB`}{{Af{Fl{Mn{Ml}}}}}}{{Flce}Cf{{Ch{Cf}}}{{Cl{CfCf}{{Cj{Cf}}}}}}{{Fl{h{BlBl}}ACj}Fl}{{Fl{h{BlBl}}ACj}d}{{FlBl}{{C`{Cf}}}}`{{Flc}Fl{{Cl{{C`{Cf}}}{{Cj{{C`{Cf}}}}}}}}1{{Flc}d{{Cl{{C`{Cf}}}{{Cj{{C`{Cf}}}}}}}}2{{Flc}{{C`{Cf}}}{{Cl{{C`{Cf}}}{{Cj{Cf}}}}}}<{FlFl}0``{ACnFl}{Fl{{C`{Cf}}}}{{ACjc}AfIj}{{Flc}AfIj}`4{Fl{{h{FlFl}}}}5{{FlBl}Fl}0{{FlFlAD`}Fl}{{ACf{C`{Cf}}AD`}{{C`{Cf}}}}{{Fl{C`{Cf}}AD`}{{C`{Cf}}}}{{Fl{C`{Cf}}}{{C`{Cf}}}}{{ACfFlAD`}Fl}4{{FlFl}Fl}{Ml{{Bd{Ml}}}}{MlAEh}{FlJ`}?````{{Flc}e{{Ch{Cf}}Gd}{}}{{Flc}Fl{{Ch{Cf}}Gd}}555{{Fl{h{BlBl}}{h{BlBl}}}Fl}{{FlBl{C`{Cf}}}d}0{{Fl{h{BlBl}}{h{BlBl}}Fl}d}1{ACfACn}{FlACn}{{FlBlBlACj}d}{{Fl{C`{{h{BlBl}}}}ACj}d}{FlFl}{{FlBl}Fl}011`1{ce{}{}}000000000000000{cJ`{}}0{Fl{{C`{{C`{Cf}}}}}}4{ACnACn}{c{{Af{e}}}{}{}}0000000000000000000000000000000{cAn{}}000000000000000{ACnFl}````{Fl{{C`{Cf}}}}1``7777777777777777`{{ACfACl}{{Bd{N`}}}}{{FlACl}{{Bd{N`}}}}{Fl{{Bd{N`}}}}0{{FlJh}{{Af{d{Mn{Ml}}}}}}{{FlJhBl}{{Af{d{Mn{Ml}}}}}}{{FlJh{C`{Jh}}}{{Af{d{Mn{Ml}}}}}}{{FlJh{C`{Jh}}Bl}{{Af{d{Mn{Ml}}}}}}`{{FlcFl}Fl{{Cl{CfCf}{{Cj{Cf}}}}}}`{{cb}d{}}{ce{}{}}0{AEjAEj}{{ce}d{}{}}{{AEj{C`{Cf}}}Cf}{{AEjAb}G`}0{cc{}}5{{{C`{Cf}}}AEj}{AEjd}7{cJ`{}}{c{{Af{e}}}{}{}}0{cAn{}}:`````;;{{Ffc}Ff{{Ch{Cf}}Gd}}{{FfFf}Ff}<<<<{{BlAEl}Ff}{FfFf}{AElAEl}==`{{}Ff}{AEnAEn}3{c{{Af{Ff}}}Hn}{{FfFf}c{}}8{{AElAEl}l}{{ce}l{}{}}0{{Ffc}Cf{{Ch{Cf}}Gd}}{{Ff{C`{Cf}}}{{C`{Cf}}}}{{FfAb}G`}0{{AElAb}G`}{cc{}}0{{FfFf}{{h{FfCf}}}}:={{AEn{h{cc}}}Cf{{Ch{Cf}}Gd}}{{Ff{h{cc}}}Cf{{Ch{Cf}}Gd}}{ce{}{}}0{{{C`{Cf}}{C`{Cf}}}Ff}{BlFf}{{Ffc}Ff{{Ch{Cf}}Gd}}{{FfFf}Ff}{Ffc{}}{{{C`{Cf}}}Ff}02{{FfCf}Ff}{{FfAl}Ff}{Ffd}{{Ffc}AfIj}{FfFf}78;;{cJ`{}}9{c{{Af{e}}}{}{}}000{cAn{}}0>>`{{cb}d{}}{{AE`{C`{Cf}}}{{C`{Cf}}}}0{AE`{{h{FlFlFlFl}}}}{ce{}{}}0{{AE`ACh}Fl}{AE`AE`}{{ce}d{}{}}`{AE`{{C`{Bl}}}}`{AE`{{C`{Cf}}}}`{AE`Cf}{{AE`Ab}G`}9{cc{}}{FlAE`}9{AE`Fl}0{AE`l}{AE`Md}{{AE`{C`{Cf}}}c{}}0{{AE`{AEb{{C`{Cf}}}}}c{}}0{{BlBlBl}AE`}`5{AE`Mh}`<`6{{AE`{C`{Cf}}AD`}{{C`{Cf}}}}{{AE`FlAD`}Fl}{AE`ACn}{AE`AE`}:{ce{}{}}1{c{{Af{e}}}{}{}}0{cAn{}}2{{AE`ACl}{{Bd{N`}}}}{{Cf{C`{Cf}}{C`{Cf}}}d}{{Cf{C`{Cf}}{C`{Cf}}}{{C`{Cf}}}}{{e{C`{c}}}{{C`{c}}}{AF`Dj}{{Cl{c}{{Cj{c}}}}}}{{ec{C`{c}}}cAF`{{Cl{cc}{{Cj{c}}}}}}{{e{C`{c}}{C`{c}}}{{C`{c}}}{AF`Dj}{{Cl{cc}{{Cj{c}}}}}}``````````{{AFbBl}AFb}00```{{AFdc}Fl{{Cl{{C`{Cf}}}{{Cj{{C`{Cf}}}}}}}}{{AFdc}d{{Cl{{C`{Cf}}}{{Cj{{C`{Cf}}}}}}}}{{AFdc}{{C`{Cf}}}{{Cl{{C`{Cf}}}{{Cj{Cf}}}}}}{{{AFh{}{{AFf{c}}}}e}{{AFh{}{{AFf{c}}}}}{}{{Cl{c}{{Cj{l}}}}}}{{{AFh{}{{AFf{c}}}}e}{{AFh{}{{AFf{c}}}}}{}{{Cl{c}{{Cj{c}}}}}}{{AFdc}Fl{{Cl{Cf}{{Cj{Cf}}}}}}{{{AFh{}{{AFf{c}}}}}c{}}{{{AFh{}{{AFf{c}}}}eg}c{}{{Ch{c}}}{{Cl{cc}{{Cj{c}}}}}}{{AFdce}Cf{{Ch{Cf}}}{{Cl{CfCf}{{Cj{Cf}}}}}}876{{{AFh{}{{AFf{c}}}}Bl}{{AFh{}{{AFf{c}}}}}{}}{{AFdBl}Fl}04100{{{AFh{}{{AFf{c}}}}e{AFh{}{{AFf{c}}}}}{{AFh{}{{AFf{c}}}}}{}{{Cl{cc}{{Cj{c}}}}}}{{AFdcFl}Fl{{Cl{CfCf}{{Cj{Cf}}}}}}`{AFjBl}0{AFjCf}0{AFj{{C`{Bl}}}}1{{AFj{C`{{h{BlBl}}}}}d}```````````````{{cb}d{}}{{{AFl{}{{AFf{c}}}}{AFl{}{{AFf{c}}}}}{{AFl{}{{AFf{c}}}}}{}}{{AFnc}eAFlAFl}{ce{}{}}0{AEdAEd}{{ce}d{}{}}{{AG`AG`}AG`}{{AGbAGb}c{}}{{AEdAb}G`}{cc{}}{{AGdAGd}Fl}70{{{AFl{}{{AFf{c}}}}c}{{AFl{}{{AFf{c}}}}}{}}{{{AGh{}{{AGf{c}}}}AEd}c{}}{{{AGh{}{{AGf{c}}}}AEd}{{AGh{}{{AGf{c}}}}}{}}{{AG`AG`}Fl}=;{c{{Af{e}}}{}{}}0{cAn{}}=```{{AGjBl}{{C`{Cf}}}}{{{AGl{}{{AFf{c}}}}e}d{}{{Cl{c}{{Cj{c}}}}}}{{{AGl{}{{AFf{c}}}}e{AGl{}{{AFf{c}}}}}d{}{{Cl{cc}{{Cj{c}}}}}}2{{AGjBlBlACj}d}{{AGj{C`{{h{BlBl}}}}ACj}d}`{CfAF`}{AF`Gf}{AF`Cf}`````{{{AEb{c}}{AEb{c}}}eAFl{}}{{{AEb{c}}Cf}e{AFlAFh}{}}{ce{}{}}0{{AGnBl}{{C`{Cf}}}}{{{AEb{c}}}eAFl{}}3{{{AEb{c}}{AEb{c}}}e{AFlAFh}{}}{{{AEb{c}}Ab}G`{O`AFl}}{cc{}}{c{{AHb{}{{AH`{c}}}}}{}}{c{{AEb{{C`{Cf}}}}}{}}{c{{AEb{{C`{Gf}}}}}{}}859{AHd{{AEb{AHd}}}}{{{AHb{}{{AH`{c}}}}}c{}}{{{AEb{{C`{Cf}}}}}c{}}{{{AEb{{C`{Gf}}}}}c{}};=9{c{{Af{e}}}{}{}}0{cAn{}}>``{{{AHf{}{{Cj{c}}}}e}c{}{}}``````{{{AHj{}{{AHh{c}}}}c}Fl{}}{{{AHl{}{{AHh{c}}}}c}d{}}10{{AHnc}AHn{}}{{AHnAHn}AHn}1010{{{AHj{}{{AHh{c}}}}{h{BlBl}}ACj}Fl{}}{{{AHl{}{{AHh{c}}}}{h{BlBl}}ACj}d{}}32{AI`Fl}0```````````{JhAIb}{{{C`{{C`{c}}}}}AId{{Ch{Cf}}Gd}}{{{C`{c}}BlBlACj}AIf{{Ch{Cf}}}}{{{C`{Cf}}{C`{Cf}}}d}{{{C`{Cf}}}{{C`{Cf}}}}1``{{cb}d{}}{ce{}{}}0{{c{Cb{c}}}{{C`{c}}}{NlGdDj}}{{FlFl}{{Ih{Fl}}}}{AIhAIh}{{ce}d{}{}}{{{Cb{{C`{Cf}}}}}{{Ih{Fl}}}}{{{Cb{c}}{Cb{c}}}{{C`{c}}}{NlGd}}{BlFl}{{BlACj}Fl}{{AIhAb}G`}0{cc{}}:{{ceBl}{{C`{Cf}}}{{Ch{Cf}}Gd}{{Ch{Cf}}Gd}}{{ceBlBl}{{C`{Cf}}}{{Ch{Cf}}Gd}{{Ch{Cf}}Gd}}{{ceBlg}{{C`{Cf}}}{{Ch{Cf}}Gd}{{Ch{Cf}}Gd}{{Ch{Cf}}Gd}}{{BlBl}Fl}{{BlBlc}FlBf}=:{{ceg}{{C`{Cf}}}{{Ch{Cf}}Gd}{{Ch{Cf}}Gd}{{Ch{Cf}}Gd}}{{cegBl}{{C`{Cf}}}{{Ch{Cf}}Gd}{{Ch{Cf}}Gd}{{Ch{Cf}}Gd}}{ce{}{}}{cJ`{}}{c{{Af{e}}}{}{}}0{cAn{}}37{{BlBlACj}Fl}`````````````````````````````````````````````````{{cb}d{}}0000005555555555555555{AIjAIj}{AIlAIl}{AInAIn}{AJ`AJ`}{AJbAJb}{AJdAJd}{AJfAJf}{{ce}d{}{}}000000{{AIjAIj}l}{{AIlAIl}l}{{AInAIn}l}{{AJ`AJ`}l}{{AJbAJb}l}{{AJdAJd}l}{{AJfAJf}l}{{ce}l{}{}}0000000000000{{AIjAb}G`}{{AIlAb}G`}0{{AInAb}G`}0{{AJ`Ab}G`}{{AJbAb}G`}{{AJdAb}G`}{{AJfAb}G`}0{{AJhAb}G`}{cc{}}0000000{{AJjAJ`}AJj}{{AJhAJ`}AJh}{{AIjc}dAh}{{AIlc}dAh}{{AInc}dAh}{{AJ`c}dAh}{{AJbc}dAh}{{AJdc}dAh}{{AJfc}dAh}{{AJj{C`{Cf}}}AJj}{{AJh{C`{Cf}}}AJh}{{AJj{h{{C`{Cf}}{C`{Cf}}}}}AJj}{{AJh{h{{C`{Cf}}{C`{Cf}}}}}AJh}{ce{}{}}0000000{{}AJh}{{AIjAIj}{{Bd{Jj}}}}{{AIlAIl}{{Bd{Jj}}}}{{AInAIn}{{Bd{Jj}}}}{{AJ`AJ`}{{Bd{Jj}}}}{{AJbAJb}{{Bd{Jj}}}}{{AJdAJd}{{Bd{Jj}}}}{{AJfAJf}{{Bd{Jj}}}}{AJj{{AJl{d}}}}{AJh{{AJl{d}}}}{{AJj{C`{{h{BlCf}}}}}AJj}{{AJh{C`{{h{BlCf}}}}}AJh}{{AJj{C`{{h{BlJh}}}}}AJj}{{AJh{C`{{h{BlJh}}}}}AJh}{{AJj{C`{Cf}}}AJj}{{AJh{C`{Cf}}}AJh}{{AJjBl}AJj}{{AJhBl}AJh}{{AJj{h{BlBl}}}AJj}{{AJh{h{BlBl}}}AJh}{{AJj{C`{Jh}}}AJj}{{AJh{C`{Jh}}}AJh}{{AJj{C`{{h{BlAIn}}}}}AJj}{{AJh{C`{{h{BlAIn}}}}}AJh}{{AJj{C`{{h{BlAIl}}}}}AJj}{{AJh{C`{{h{BlAIl}}}}}AJh}{{AJjJh}AJj}{{AJhJh}AJh}{{AJj{C`{{h{BlAJf}}}}}AJj}{{AJh{C`{{h{BlAJf}}}}}AJh}{{AJjAJb}AJj}{{AJhAJb}AJh}5454{{AJj{h{CfCf}}}AJj}{{AJh{h{CfCf}}}AJh}{{AJjAJd}AJj}{{AJhAJd}AJh}98321098{AJjAJj}{AJhAJh}{ce{}{}}000000{cJ`{}}00{c{{Af{e}}}{}{}}000000000000000{cAn{}}000000033333333```{{AJnBl}J`}{{AK`Bl}J`}{AKbd}{{{C`{c}}}{{C`{{h{cc}}}}}Nl}{{{C`{Cf}}{C`{Cf}}}{{C`{Cf}}}}{{J`J`}J`}1{{{Cb{Cf}}{Cb{Cf}}Cf}l}{{{C`{{h{cc}}}}c}Bl{NdAd}}{{{Cb{c}}}{{C`{{M`{c}}}}}{NlNd}}{{{C`{c}}}c{NdGdNl}}0{{ce}l{{Ch{Cf}}}{{Ch{Cf}}}}{{BlBl}{{h{AlAl}}}}{BlCf}{{JhBl}J`}{{{Cb{c}}{Cb{e}}}{{C`{{h{{M`{c}}e}}}}}{NlNd}Nl}``{{{AKd{}{{B`{c}}}}Bl}{{C`{c}}}{}}`````````````{{cb}d{}}00{ce{}{}}00000{AKfAKf}{AKhAKh}{AKjAKj}{{ce}d{}{}}00{{AKfAKf}l}{{ce}l{}{}}0{{AKfAb}G`}{{AKhAb}G`}{{AKjAb}G`}{cc{}}00{{AKfc}dAh}{{AKj{C`{Jh}}}AKj}{{AKjFl}AKj}{{AKj{C`{Cf}}}AKj}>>>{{}AKj}{{AKfAKf}{{Bd{Jj}}}}{{AKjJh}AKj}{{AKjDd}AKj}{ce{}{}}00{c{{Af{e}}}{}{}}00000{cAn{}}00222{AKjd}","c":[2057,2111],"p":[[5,"Private",3144],[1,"unit"],[10,"TrigOps",925],[1,"tuple"],[6,"CompressionOptions",31],[1,"bool"],[17,"Float"],[10,"ExpLogOps",925],[5,"Formatter",3145],[5,"Error",3145],[6,"Result",3146],[10,"Hasher",3147],[10,"PowOps",925],[1,"i32"],[5,"TypeId",3148],[17,"Item"],[10,"SliceRandom",190],[6,"Option",3149],[10,"Rng",190],[10,"Sized",3150],[10,"IteratorRandom",190],[1,"usize"],[5,"SliceChooseIter",3151],[5,"Vec",3152],[1,"slice"],[6,"WeightedError",3153],[1,"f64"],[10,"Into",3154],[17,"Output"],[10,"Fn",3155],[10,"SampleBorrow",3156],[10,"Fill",3157],[10,"RngCore",190],[1,"u8"],[17,"Seed"],[10,"SeedableRng",190],[10,"Default",3158],[10,"AsMut",3154],[5,"Error",3159],[10,"SampleUniform",3156],[10,"SampleRange",3156],[1,"u32"],[10,"Distribution",190],[5,"DistMap",3160],[1,"u64"],[5,"DistIter",3160],[5,"ThreadRng",190],[5,"SmallRng",190],[5,"StdRng",190],[5,"Error",3161],[5,"Polynomial",2490],[6,"EigenMethod",311],[5,"Eigen",311],[5,"Matrix",1949],[5,"JacobiTemp",311],[8,"Result",3145],[6,"Integral",363],[10,"Copy",3150],[6,"AD",1330],[6,"ODEError",406],[5,"RALS3",406],[5,"RK4",406],[5,"RALS4",406],[5,"RK5",406],[5,"BS23",406],[5,"RKF45",406],[5,"DP45",406],[5,"TSIT45",406],[6,"ImplicitSolver",406],[5,"GL4",406],[10,"Deserializer",3162],[10,"ODEProblem",406],[10,"ButcherTableau",406],[5,"BasicODESolver",406],[10,"ODEIntegrator",406],[8,"Result",3163],[10,"Serializer",3164],[10,"ODESolver",406],[5,"Error",3163],[5,"String",3165],[6,"OptMethod",656],[6,"OptOption",656],[5,"Optimizer",656],[1,"str"],[6,"Ordering",3166],[6,"RootError",717],[10,"RootFindingProblem",717],[8,"Pt",717],[8,"Jaco",717],[10,"RootFinder",717],[5,"BisectionMethod",717],[1,"array"],[5,"NewtonMethod",717],[5,"SecantMethod",717],[5,"FalsePositionMethod",717],[5,"BroydenMethod",717],[8,"Intv",717],[8,"Hess",717],[5,"CubicSpline",820],[6,"SplineError",820],[5,"CubicHermiteSpline",820],[6,"SlopeMethod",820],[10,"Spline",820],[5,"Range",3167],[10,"SimplerLinearAlgebra",1023],[5,"PQLU",1949],[10,"SimpleNorm",1023],[5,"QR",1949],[10,"SimpleParquet",1023],[10,"Error",1949],[5,"Box",3168],[5,"WAZD",1949],[10,"RNG",1073],[10,"PartialOrd",3166],[5,"WeightedUniform",1073],[6,"OPDist",1073],[6,"TPDist",1073],[10,"Clone",3169],[6,"WeightedUniformError",1073],[10,"Debug",3145],[17,"Parameter"],[10,"ParametricDist",1073],[5,"ConfusionMatrix",1197],[6,"Metric",1197],[6,"QType",1197],[17,"Array"],[17,"Value"],[10,"Statistics",1197],[10,"OrderedStat",1197],[10,"PartialEq",3166],[5,"ADFn",1330],[5,"ADIntoIter",1330],[5,"ADIter",1330],[5,"ADIterMut",1330],[10,"IntoIterator",3170],[10,"ADVec",1330],[5,"Series",1475],[10,"TypedVector",1475],[1,"i16"],[1,"f32"],[1,"i64"],[1,"i8"],[1,"u16"],[1,"char"],[1,"isize"],[6,"DType",1475],[5,"DataFrame",1475],[5,"Scalar",1475],[6,"DTypeArray",1475],[6,"DTypeValue",1475],[10,"TypedScalar",1475],[10,"WithCSV",1475],[10,"WithNetCDF",1475],[10,"WithParquet",1475],[10,"LinearAlgebra",1949],[6,"UPLO",1949],[6,"Shape",1949],[6,"Form",1949],[5,"SVD",1949],[6,"SolveKind",1949],[6,"LAPACK_STATUS",1949],[6,"SVD_STATUS",1949],[6,"POSITIVE_STATUS",1949],[5,"DGETRF",1949],[5,"DGEQRF",1949],[5,"DGESVD",1949],[5,"DPOTRF",1949],[5,"SPMatrix",2559],[5,"Redox",2710],[6,"Norm",2658],[5,"Request",3171],[5,"Source",3171],[5,"Multinomial",2471],[6,"SpecialKind",2490],[10,"Calculus",2490],[10,"Real",2706],[10,"FloatWithPrecision",2622],[10,"FPMatrix",2626],[17,"Scalar"],[10,"FPVector",2626],[10,"Algorithm",2650],[10,"Vector",2658],[10,"LinearOp",2658],[10,"VectorProduct",2658],[10,"InnerProduct",2658],[10,"MatrixProduct",2658],[17,"UnsignedScalar"],[10,"Normed",2658],[10,"MutMatrix",2697],[10,"MutFP",2697],[10,"MatrixPtr",2710],[17,"ToRedox"],[10,"RedoxCommon",2710],[10,"Oxide",2710],[10,"StableFn",2742],[17,"Vec"],[10,"Scalable",2745],[10,"ScalableMut",2745],[10,"VecOps",2745],[10,"ConvToMat",2745],[10,"MATLAB",2775],[10,"PYTHON",2775],[10,"R",2775],[6,"ConcatenateError",2784],[6,"PlotOptions",2818],[6,"Markers",2818],[6,"LineStyle",2818],[6,"Grid",2818],[6,"PlotStyle",2818],[6,"PlotScale",2818],[6,"PlotType",2818],[5,"Plot2D",2818],[10,"Plot",2818],[8,"PyResult",3172],[10,"LowerExpWithPlus",3057],[10,"UpperExpWithPlus",3057],[10,"Printable",3057],[10,"SampleRNG",3077],[6,"ToWriter",3080],[6,"Queue",3080],[5,"SimpleWriter",3080]],"b":[[505,"impl-Display-for-ODEError"],[506,"impl-Debug-for-ODEError"],[755,"impl-Display-for-RootError%3CI%3E"],[756,"impl-Debug-for-RootError%3CI%3E"],[868,"impl-Debug-for-SplineError"],[869,"impl-Display-for-SplineError"],[891,"impl-Into%3CVec%3C(Range%3Cf64%3E,+Polynomial)%3E%3E-for-CubicSpline"],[892,"impl-Into%3CVec%3CPolynomial%3E%3E-for-CubicSpline"],[895,"impl-Into%3CVec%3C(Range%3Cf64%3E,+Polynomial)%3E%3E-for-CubicHermiteSpline"],[896,"impl-Into%3CVec%3CPolynomial%3E%3E-for-CubicHermiteSpline"],[1122,"impl-Debug-for-WeightedUniformError"],[1123,"impl-Display-for-WeightedUniformError"],[1285,"impl-Display-for-Metric"],[1286,"impl-Debug-for-Metric"],[1342,"impl-Add-for-AD"],[1343,"impl-Add%3Cf64%3E-for-AD"],[1358,"impl-StableFn%3CAD%3E-for-ADFn%3CF%3E"],[1359,"impl-StableFn%3CVec%3CAD%3E%3E-for-ADFn%3CF%3E"],[1360,"impl-StableFn%3CVec%3Cf64%3E%3E-for-ADFn%3CF%3E"],[1361,"impl-StableFn%3Cf64%3E-for-ADFn%3CF%3E"],[1362,"impl-StableFn%3C%26Vec%3CAD%3E%3E-for-ADFn%3CF%3E"],[1363,"impl-StableFn%3C%26Vec%3Cf64%3E%3E-for-ADFn%3CF%3E"],[1370,"impl-Div%3Cf64%3E-for-AD"],[1371,"impl-Div-for-AD"],[1378,"impl-Debug-for-AD"],[1379,"impl-Display-for-AD"],[1390,"impl-FromIterator%3C%26f64%3E-for-AD"],[1391,"impl-FromIterator%3Cf64%3E-for-AD"],[1401,"impl-IntoIterator-for-AD"],[1402,"impl-IntoIterator-for-%26AD"],[1403,"impl-IntoIterator-for-%26mut+AD"],[1417,"impl-Mul%3Cf64%3E-for-AD"],[1418,"impl-Mul-for-AD"],[1441,"impl-Sub%3Cf64%3E-for-AD"],[1442,"impl-Sub-for-AD"],[1539,"impl-TypedVector%3Ci16%3E-for-Series"],[1540,"impl-TypedVector%3Cf32%3E-for-Series"],[1541,"impl-TypedVector%3Cu8%3E-for-Series"],[1542,"impl-TypedVector%3CString%3E-for-Series"],[1543,"impl-TypedVector%3Cf64%3E-for-Series"],[1544,"impl-TypedVector%3Ci64%3E-for-Series"],[1545,"impl-TypedVector%3Cusize%3E-for-Series"],[1546,"impl-TypedVector%3Ci8%3E-for-Series"],[1547,"impl-TypedVector%3Cu64%3E-for-Series"],[1548,"impl-TypedVector%3Cbool%3E-for-Series"],[1549,"impl-TypedVector%3Cu32%3E-for-Series"],[1550,"impl-TypedVector%3Cu16%3E-for-Series"],[1551,"impl-TypedVector%3Cchar%3E-for-Series"],[1552,"impl-TypedVector%3Cisize%3E-for-Series"],[1553,"impl-TypedVector%3Ci32%3E-for-Series"],[1555,"impl-TypedVector%3Cisize%3E-for-Series"],[1556,"impl-TypedVector%3CString%3E-for-Series"],[1557,"impl-TypedVector%3Ci8%3E-for-Series"],[1558,"impl-TypedVector%3Cu16%3E-for-Series"],[1559,"impl-TypedVector%3Cu32%3E-for-Series"],[1560,"impl-TypedVector%3Cu8%3E-for-Series"],[1561,"impl-TypedVector%3Cbool%3E-for-Series"],[1562,"impl-TypedVector%3Cu64%3E-for-Series"],[1563,"impl-TypedVector%3Cf32%3E-for-Series"],[1564,"impl-TypedVector%3Ci32%3E-for-Series"],[1565,"impl-TypedVector%3Ci16%3E-for-Series"],[1566,"impl-TypedVector%3Cf64%3E-for-Series"],[1567,"impl-TypedVector%3Cusize%3E-for-Series"],[1568,"impl-TypedVector%3Ci64%3E-for-Series"],[1569,"impl-TypedVector%3Cchar%3E-for-Series"],[1574,"impl-TypedVector%3Cu8%3E-for-Series"],[1575,"impl-TypedVector%3Cf64%3E-for-Series"],[1576,"impl-TypedVector%3Ci64%3E-for-Series"],[1577,"impl-TypedVector%3CString%3E-for-Series"],[1578,"impl-TypedVector%3Cf32%3E-for-Series"],[1579,"impl-TypedVector%3Cbool%3E-for-Series"],[1580,"impl-TypedVector%3Cu32%3E-for-Series"],[1581,"impl-TypedVector%3Cchar%3E-for-Series"],[1582,"impl-TypedVector%3Ci32%3E-for-Series"],[1583,"impl-TypedVector%3Ci16%3E-for-Series"],[1584,"impl-TypedVector%3Cisize%3E-for-Series"],[1585,"impl-TypedVector%3Cu64%3E-for-Series"],[1586,"impl-TypedVector%3Ci8%3E-for-Series"],[1587,"impl-TypedVector%3Cu16%3E-for-Series"],[1588,"impl-TypedVector%3Cusize%3E-for-Series"],[1626,"impl-TypedVector%3Ci16%3E-for-Series"],[1627,"impl-TypedVector%3Cf32%3E-for-Series"],[1628,"impl-TypedVector%3Ci64%3E-for-Series"],[1629,"impl-TypedVector%3CString%3E-for-Series"],[1630,"impl-TypedVector%3Cisize%3E-for-Series"],[1631,"impl-TypedVector%3Cu64%3E-for-Series"],[1632,"impl-TypedVector%3Cu32%3E-for-Series"],[1633,"impl-TypedVector%3Cf64%3E-for-Series"],[1634,"impl-TypedVector%3Cu8%3E-for-Series"],[1635,"impl-TypedVector%3Ci8%3E-for-Series"],[1636,"impl-TypedVector%3Cbool%3E-for-Series"],[1637,"impl-TypedVector%3Cusize%3E-for-Series"],[1638,"impl-TypedVector%3Cchar%3E-for-Series"],[1639,"impl-TypedVector%3Ci32%3E-for-Series"],[1640,"impl-TypedVector%3Cu16%3E-for-Series"],[1641,"impl-Debug-for-DType"],[1642,"impl-Display-for-DType"],[1643,"impl-Debug-for-DTypeArray"],[1644,"impl-Display-for-DTypeArray"],[1646,"impl-Debug-for-DataFrame"],[1647,"impl-Display-for-DataFrame"],[1649,"impl-Display-for-Scalar"],[1650,"impl-Debug-for-Scalar"],[1652,"impl-TypedVector%3Cu8%3E-for-Series"],[1653,"impl-TypedVector%3Cisize%3E-for-Series"],[1654,"impl-TypedVector%3CString%3E-for-Series"],[1655,"impl-TypedVector%3Cbool%3E-for-Series"],[1656,"impl-TypedVector%3Ci64%3E-for-Series"],[1657,"impl-TypedVector%3Cu32%3E-for-Series"],[1658,"impl-TypedVector%3Ci32%3E-for-Series"],[1659,"impl-TypedVector%3Cchar%3E-for-Series"],[1660,"impl-TypedVector%3Ci16%3E-for-Series"],[1661,"impl-TypedVector%3Cusize%3E-for-Series"],[1662,"impl-TypedVector%3Cf64%3E-for-Series"],[1663,"impl-TypedVector%3Cu16%3E-for-Series"],[1664,"impl-TypedVector%3Cf32%3E-for-Series"],[1665,"impl-TypedVector%3Ci8%3E-for-Series"],[1666,"impl-TypedVector%3Cu64%3E-for-Series"],[1676,"impl-Index%3C%26str%3E-for-DataFrame"],[1677,"impl-Index%3Cusize%3E-for-DataFrame"],[1678,"impl-IndexMut%3Cusize%3E-for-DataFrame"],[1679,"impl-IndexMut%3C%26str%3E-for-DataFrame"],[1690,"impl-TypedVector%3Cu8%3E-for-Series"],[1691,"impl-TypedVector%3CString%3E-for-Series"],[1692,"impl-TypedVector%3Ci64%3E-for-Series"],[1693,"impl-TypedVector%3Cu64%3E-for-Series"],[1694,"impl-TypedVector%3Ci16%3E-for-Series"],[1695,"impl-TypedVector%3Cf32%3E-for-Series"],[1696,"impl-TypedVector%3Cchar%3E-for-Series"],[1697,"impl-TypedVector%3Cf64%3E-for-Series"],[1698,"impl-TypedVector%3Cisize%3E-for-Series"],[1699,"impl-TypedVector%3Cbool%3E-for-Series"],[1700,"impl-TypedVector%3Ci32%3E-for-Series"],[1701,"impl-TypedVector%3Ci8%3E-for-Series"],[1702,"impl-TypedVector%3Cu32%3E-for-Series"],[1703,"impl-TypedVector%3Cu16%3E-for-Series"],[1704,"impl-TypedVector%3Cusize%3E-for-Series"],[1707,"impl-TypedVector%3Cchar%3E-for-Series"],[1708,"impl-TypedVector%3Ci32%3E-for-Series"],[1709,"impl-TypedVector%3Ci64%3E-for-Series"],[1710,"impl-TypedVector%3Cu32%3E-for-Series"],[1711,"impl-TypedVector%3Ci16%3E-for-Series"],[1712,"impl-TypedVector%3Cisize%3E-for-Series"],[1713,"impl-TypedVector%3Cf32%3E-for-Series"],[1714,"impl-TypedVector%3Cf64%3E-for-Series"],[1715,"impl-TypedVector%3Cbool%3E-for-Series"],[1716,"impl-TypedVector%3Cusize%3E-for-Series"],[1717,"impl-TypedVector%3Ci8%3E-for-Series"],[1718,"impl-TypedVector%3Cu64%3E-for-Series"],[1719,"impl-TypedVector%3Cu8%3E-for-Series"],[1720,"impl-TypedVector%3Cu16%3E-for-Series"],[1721,"impl-TypedVector%3CString%3E-for-Series"],[1725,"impl-TypedVector%3Cbool%3E-for-Series"],[1726,"impl-TypedVector%3Cf64%3E-for-Series"],[1727,"impl-TypedVector%3Cf32%3E-for-Series"],[1728,"impl-TypedVector%3Cchar%3E-for-Series"],[1729,"impl-TypedVector%3Cusize%3E-for-Series"],[1730,"impl-TypedVector%3Cu16%3E-for-Series"],[1731,"impl-TypedVector%3Cisize%3E-for-Series"],[1732,"impl-TypedVector%3Cu8%3E-for-Series"],[1733,"impl-TypedVector%3Ci64%3E-for-Series"],[1734,"impl-TypedVector%3Cu32%3E-for-Series"],[1735,"impl-TypedVector%3Ci16%3E-for-Series"],[1736,"impl-TypedVector%3CString%3E-for-Series"],[1737,"impl-TypedVector%3Ci8%3E-for-Series"],[1738,"impl-TypedVector%3Ci32%3E-for-Series"],[1739,"impl-TypedVector%3Cu64%3E-for-Series"],[1740,"impl-TypedScalar%3Cu8%3E-for-Scalar"],[1741,"impl-TypedScalar%3Cf32%3E-for-Scalar"],[1742,"impl-TypedScalar%3Ci64%3E-for-Scalar"],[1743,"impl-TypedScalar%3Ci16%3E-for-Scalar"],[1744,"impl-TypedScalar%3Cu64%3E-for-Scalar"],[1745,"impl-TypedScalar%3CString%3E-for-Scalar"],[1746,"impl-TypedScalar%3Cisize%3E-for-Scalar"],[1747,"impl-TypedScalar%3Cf64%3E-for-Scalar"],[1748,"impl-TypedScalar%3Cu32%3E-for-Scalar"],[1749,"impl-TypedScalar%3Ci8%3E-for-Scalar"],[1750,"impl-TypedScalar%3Cbool%3E-for-Scalar"],[1751,"impl-TypedScalar%3Cusize%3E-for-Scalar"],[1752,"impl-TypedScalar%3Cchar%3E-for-Scalar"],[1753,"impl-TypedScalar%3Ci32%3E-for-Scalar"],[1754,"impl-TypedScalar%3Cu16%3E-for-Scalar"],[1763,"impl-TypedVector%3Cbool%3E-for-Series"],[1764,"impl-TypedVector%3Cisize%3E-for-Series"],[1765,"impl-TypedVector%3Cu32%3E-for-Series"],[1766,"impl-TypedVector%3Cf32%3E-for-Series"],[1767,"impl-TypedVector%3Ci8%3E-for-Series"],[1768,"impl-TypedVector%3Cchar%3E-for-Series"],[1769,"impl-TypedVector%3Cusize%3E-for-Series"],[1770,"impl-TypedVector%3Ci16%3E-for-Series"],[1771,"impl-TypedVector%3Cu16%3E-for-Series"],[1772,"impl-TypedVector%3Cf64%3E-for-Series"],[1773,"impl-TypedVector%3Ci32%3E-for-Series"],[1774,"impl-TypedVector%3Cu64%3E-for-Series"],[1775,"impl-TypedVector%3Cu8%3E-for-Series"],[1776,"impl-TypedVector%3CString%3E-for-Series"],[1777,"impl-TypedVector%3Ci64%3E-for-Series"],[1785,"impl-SimpleParquet-for-DataFrame"],[1786,"impl-WithParquet-for-DataFrame"],[1790,"impl-TypedVector%3CString%3E-for-Series"],[1791,"impl-TypedVector%3Cf32%3E-for-Series"],[1792,"impl-TypedVector%3Cbool%3E-for-Series"],[1793,"impl-TypedVector%3Ci64%3E-for-Series"],[1794,"impl-TypedVector%3Cu16%3E-for-Series"],[1795,"impl-TypedVector%3Ci16%3E-for-Series"],[1796,"impl-TypedVector%3Cu64%3E-for-Series"],[1797,"impl-TypedVector%3Cu8%3E-for-Series"],[1798,"impl-TypedVector%3Ci8%3E-for-Series"],[1799,"impl-TypedVector%3Ci32%3E-for-Series"],[1800,"impl-TypedVector%3Cu32%3E-for-Series"],[1801,"impl-TypedVector%3Cchar%3E-for-Series"],[1802,"impl-TypedVector%3Cf64%3E-for-Series"],[1803,"impl-TypedVector%3Cusize%3E-for-Series"],[1804,"impl-TypedVector%3Cisize%3E-for-Series"],[1806,"impl-TypedVector%3CString%3E-for-Series"],[1807,"impl-TypedVector%3Cbool%3E-for-Series"],[1808,"impl-TypedVector%3Cchar%3E-for-Series"],[1809,"impl-TypedVector%3Cf64%3E-for-Series"],[1810,"impl-TypedVector%3Cu16%3E-for-Series"],[1811,"impl-TypedVector%3Cf32%3E-for-Series"],[1812,"impl-TypedVector%3Cu64%3E-for-Series"],[1813,"impl-TypedVector%3Cu8%3E-for-Series"],[1814,"impl-TypedVector%3Cu32%3E-for-Series"],[1815,"impl-TypedVector%3Ci8%3E-for-Series"],[1816,"impl-TypedVector%3Ci64%3E-for-Series"],[1817,"impl-TypedVector%3Ci16%3E-for-Series"],[1818,"impl-TypedVector%3Cisize%3E-for-Series"],[1819,"impl-TypedVector%3Cusize%3E-for-Series"],[1820,"impl-TypedVector%3Ci32%3E-for-Series"],[1824,"impl-TypedVector%3Cu8%3E-for-Series"],[1825,"impl-TypedVector%3Cchar%3E-for-Series"],[1826,"impl-TypedVector%3Ci64%3E-for-Series"],[1827,"impl-TypedVector%3Cu64%3E-for-Series"],[1828,"impl-TypedVector%3Cf64%3E-for-Series"],[1829,"impl-TypedVector%3Cisize%3E-for-Series"],[1830,"impl-TypedVector%3Ci32%3E-for-Series"],[1831,"impl-TypedVector%3Cu32%3E-for-Series"],[1832,"impl-TypedVector%3Ci8%3E-for-Series"],[1833,"impl-TypedVector%3Cu16%3E-for-Series"],[1834,"impl-TypedVector%3Cusize%3E-for-Series"],[1835,"impl-TypedVector%3Cf32%3E-for-Series"],[1836,"impl-TypedVector%3CString%3E-for-Series"],[1837,"impl-TypedVector%3Ci16%3E-for-Series"],[1838,"impl-TypedVector%3Cbool%3E-for-Series"],[1840,"impl-TypedVector%3Cu64%3E-for-Series"],[1841,"impl-TypedVector%3Cu8%3E-for-Series"],[1842,"impl-TypedVector%3Cf32%3E-for-Series"],[1843,"impl-TypedVector%3CString%3E-for-Series"],[1844,"impl-TypedVector%3Ci64%3E-for-Series"],[1845,"impl-TypedVector%3Ci16%3E-for-Series"],[1846,"impl-TypedVector%3Cbool%3E-for-Series"],[1847,"impl-TypedVector%3Cchar%3E-for-Series"],[1848,"impl-TypedVector%3Ci32%3E-for-Series"],[1849,"impl-TypedVector%3Ci8%3E-for-Series"],[1850,"impl-TypedVector%3Cusize%3E-for-Series"],[1851,"impl-TypedVector%3Cu32%3E-for-Series"],[1852,"impl-TypedVector%3Cisize%3E-for-Series"],[1853,"impl-TypedVector%3Cu16%3E-for-Series"],[1854,"impl-TypedVector%3Cf64%3E-for-Series"],[1869,"impl-TypedVector%3Ci64%3E-for-Series"],[1870,"impl-TypedVector%3Cusize%3E-for-Series"],[1871,"impl-TypedVector%3Cchar%3E-for-Series"],[1872,"impl-TypedVector%3Cisize%3E-for-Series"],[1873,"impl-TypedVector%3Cbool%3E-for-Series"],[1874,"impl-TypedVector%3Cu16%3E-for-Series"],[1875,"impl-TypedVector%3Cf32%3E-for-Series"],[1876,"impl-TypedVector%3Ci8%3E-for-Series"],[1877,"impl-TypedVector%3Cf64%3E-for-Series"],[1878,"impl-TypedVector%3Ci32%3E-for-Series"],[1879,"impl-TypedVector%3Cu32%3E-for-Series"],[1880,"impl-TypedVector%3CString%3E-for-Series"],[1881,"impl-TypedVector%3Cu8%3E-for-Series"],[1882,"impl-TypedVector%3Ci16%3E-for-Series"],[1883,"impl-TypedVector%3Cu64%3E-for-Series"],[1903,"impl-TypedScalar%3Cf32%3E-for-Scalar"],[1904,"impl-TypedScalar%3Ci8%3E-for-Scalar"],[1905,"impl-TypedScalar%3Ci64%3E-for-Scalar"],[1906,"impl-TypedScalar%3Cu8%3E-for-Scalar"],[1907,"impl-TypedScalar%3Cf64%3E-for-Scalar"],[1908,"impl-TypedScalar%3Cu16%3E-for-Scalar"],[1909,"impl-TypedScalar%3Cbool%3E-for-Scalar"],[1910,"impl-TypedScalar%3Cu64%3E-for-Scalar"],[1911,"impl-TypedScalar%3Cusize%3E-for-Scalar"],[1912,"impl-TypedScalar%3CString%3E-for-Scalar"],[1913,"impl-TypedScalar%3Ci16%3E-for-Scalar"],[1914,"impl-TypedScalar%3Cchar%3E-for-Scalar"],[1915,"impl-TypedScalar%3Cisize%3E-for-Scalar"],[1916,"impl-TypedScalar%3Ci32%3E-for-Scalar"],[1917,"impl-TypedScalar%3Cu32%3E-for-Scalar"],[1931,"impl-SimpleParquet-for-DataFrame"],[1932,"impl-WithParquet-for-DataFrame"],[1934,"impl-TypedVector%3Cisize%3E-for-Series"],[1935,"impl-TypedVector%3Cu32%3E-for-Series"],[1936,"impl-TypedVector%3Cbool%3E-for-Series"],[1937,"impl-TypedVector%3Cf32%3E-for-Series"],[1938,"impl-TypedVector%3Cusize%3E-for-Series"],[1939,"impl-TypedVector%3Cu16%3E-for-Series"],[1940,"impl-TypedVector%3Cf64%3E-for-Series"],[1941,"impl-TypedVector%3Ci64%3E-for-Series"],[1942,"impl-TypedVector%3Cu64%3E-for-Series"],[1943,"impl-TypedVector%3Ci32%3E-for-Series"],[1944,"impl-TypedVector%3Cchar%3E-for-Series"],[1945,"impl-TypedVector%3CString%3E-for-Series"],[1946,"impl-TypedVector%3Ci16%3E-for-Series"],[1947,"impl-TypedVector%3Ci8%3E-for-Series"],[1948,"impl-TypedVector%3Cu8%3E-for-Series"],[2002,"impl-Add%3C%26Matrix%3E-for-%26Matrix"],[2003,"impl-Add%3CT%3E-for-Matrix"],[2004,"impl-Add-for-Matrix"],[2005,"impl-Add%3CT%3E-for-%26Matrix"],[2019,"impl-SimplerLinearAlgebra-for-Matrix"],[2020,"impl-LinearAlgebra-for-Matrix"],[2023,"impl-LinearAlgebra-for-Matrix"],[2024,"impl-SimplerLinearAlgebra-for-Matrix"],[2061,"impl-SimplerLinearAlgebra-for-Matrix"],[2062,"impl-LinearAlgebra-for-Matrix"],[2115,"impl-LinearAlgebra-for-Matrix"],[2116,"impl-SimplerLinearAlgebra-for-Matrix"],[2120,"impl-Div%3Cusize%3E-for-%26Matrix"],[2121,"impl-Div%3Ci32%3E-for-Matrix"],[2122,"impl-Div%3Ci64%3E-for-Matrix"],[2123,"impl-Div-for-Matrix"],[2124,"impl-Div%3Ci32%3E-for-%26Matrix"],[2125,"impl-Div%3Cusize%3E-for-Matrix"],[2126,"impl-Div%3Cf64%3E-for-%26Matrix"],[2127,"impl-Div%3Cf64%3E-for-Matrix"],[2128,"impl-Div%3Ci64%3E-for-%26Matrix"],[2130,"impl-dyn+Error"],[2131,"impl-dyn+Error+%2B+Send+%2B+Sync"],[2132,"impl-dyn+Error+%2B+Send"],[2133,"impl-dyn+Error"],[2134,"impl-dyn+Error+%2B+Send"],[2135,"impl-dyn+Error+%2B+Send+%2B+Sync"],[2136,"impl-dyn+Error+%2B+Send"],[2137,"impl-dyn+Error+%2B+Send+%2B+Sync"],[2138,"impl-dyn+Error"],[2159,"impl-Display-for-Shape"],[2160,"impl-Debug-for-Shape"],[2161,"impl-Display-for-Matrix"],[2162,"impl-Debug-for-Matrix"],[2178,"impl-LinearAlgebra-for-Matrix"],[2179,"impl-SimplerLinearAlgebra-for-Matrix"],[2214,"impl-Into%3C%26Vec%3Cf64%3E%3E-for-%26Matrix"],[2215,"impl-Into%3CSPMatrix%3E-for-Matrix"],[2216,"impl-Into%3CVec%3Cf64%3E%3E-for-Matrix"],[2233,"impl-LinearAlgebra-for-Matrix"],[2234,"impl-SimplerLinearAlgebra-for-Matrix"],[2239,"impl-dyn+Error+%2B+Send+%2B+Sync"],[2240,"impl-dyn+Error+%2B+Send"],[2241,"impl-dyn+Error"],[2243,"impl-LinearAlgebra-for-Matrix"],[2244,"impl-SimplerLinearAlgebra-for-Matrix"],[2258,"impl-SimplerLinearAlgebra-for-Matrix"],[2259,"impl-LinearAlgebra-for-Matrix"],[2263,"impl-Mul%3CRedox%3CVec%3Cf64%3E%3E%3E-for-%26Matrix"],[2264,"impl-Mul%3Cusize%3E-for-Matrix"],[2265,"impl-Mul%3CVec%3Cf64%3E%3E-for-Matrix"],[2266,"impl-Mul-for-Matrix"],[2267,"impl-Mul%3C%26Matrix%3E-for-%26Matrix"],[2268,"impl-Mul%3C%26Vec%3Cf64%3E%3E-for-%26Matrix"],[2269,"impl-Mul%3CRedox%3CVec%3Cf64%3E%3E%3E-for-Matrix"],[2270,"impl-Mul%3Ci64%3E-for-Matrix"],[2271,"impl-Mul%3Ci32%3E-for-Matrix"],[2272,"impl-Mul%3Cf64%3E-for-Matrix"],[2275,"impl-Neg-for-%26Matrix"],[2276,"impl-Neg-for-Matrix"],[2277,"impl-PYTHON-for-Matrix"],[2278,"impl-MATLAB-for-Matrix"],[2279,"impl-R-for-Matrix"],[2280,"impl-SimpleNorm-for-Matrix"],[2281,"impl-Normed-for-Matrix"],[2282,"impl-SimpleNorm-for-Matrix"],[2283,"impl-Normed-for-Matrix"],[2291,"impl-LinearAlgebra-for-Matrix"],[2292,"impl-SimplerLinearAlgebra-for-Matrix"],[2299,"impl-LinearAlgebra-for-Matrix"],[2300,"impl-SimplerLinearAlgebra-for-Matrix"],[2316,"impl-SimplerLinearAlgebra-for-Matrix"],[2317,"impl-LinearAlgebra-for-Matrix"],[2332,"impl-LinearAlgebra-for-Matrix"],[2333,"impl-SimplerLinearAlgebra-for-Matrix"],[2335,"impl-LinearAlgebra-for-Matrix"],[2336,"impl-SimplerLinearAlgebra-for-Matrix"],[2345,"impl-Sub%3CT%3E-for-%26Matrix"],[2346,"impl-Sub%3CT%3E-for-Matrix"],[2347,"impl-Sub%3C%26Matrix%3E-for-%26Matrix"],[2348,"impl-Sub-for-Matrix"],[2462,"impl-LinearAlgebra-for-Matrix"],[2463,"impl-SimplerLinearAlgebra-for-Matrix"],[2478,"impl-Display-for-Multinomial"],[2479,"impl-Debug-for-Multinomial"],[2497,"impl-Add%3CT%3E-for-Polynomial"],[2498,"impl-Add-for-Polynomial"],[2513,"impl-Div-for-Polynomial"],[2514,"impl-Div%3CT%3E-for-Polynomial"],[2520,"impl-Debug-for-Polynomial"],[2521,"impl-Display-for-Polynomial"],[2534,"impl-Mul%3CT%3E-for-Polynomial"],[2535,"impl-Mul-for-Polynomial"],[2545,"impl-Sub-for-Polynomial"],[2546,"impl-Sub%3CT%3E-for-Polynomial"],[2584,"impl-Mul%3C%26Vec%3Cf64%3E%3E-for-%26SPMatrix"],[2585,"impl-Mul%3CVec%3Cf64%3E%3E-for-SPMatrix"],[2586,"impl-Mul%3CRedox%3CVec%3Cf64%3E%3E%3E-for-SPMatrix"],[2587,"impl-Mul%3CRedox%3CVec%3Cf64%3E%3E%3E-for-%26SPMatrix"],[2715,"impl-Add-for-Redox%3CT%3E"],[2716,"impl-Add%3Cf64%3E-for-Redox%3CT%3E"],[2721,"impl-Div%3Cf64%3E-for-Redox%3CT%3E"],[2722,"impl-Div-for-Redox%3CT%3E"],[2726,"impl-RedoxCommon-for-Redox%3CVec%3Cf64%3E%3E"],[2727,"impl-RedoxCommon-for-Redox%3CVec%3CAD%3E%3E"],[2729,"impl-Mul-for-Redox%3CT%3E"],[2730,"impl-Mul%3Cf64%3E-for-Redox%3CT%3E"],[2733,"impl-RedoxCommon-for-Redox%3CVec%3Cf64%3E%3E"],[2734,"impl-RedoxCommon-for-Redox%3CVec%3CAD%3E%3E"],[2736,"impl-Sub%3Cf64%3E-for-Redox%3CT%3E"],[2737,"impl-Sub-for-Redox%3CT%3E"],[2797,"impl-Debug-for-ConcatenateError"],[2798,"impl-Display-for-ConcatenateError"],[2926,"impl-Debug-for-Markers"],[2927,"impl-Display-for-Markers"],[2928,"impl-Display-for-LineStyle"],[2929,"impl-Debug-for-LineStyle"],[2933,"impl-Display-for-PlotType"],[2934,"impl-Debug-for-PlotType"]]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
